# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=3000.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 300.0), 
    point2=(300.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -111.932678222656, 80.9891357421875), value=300.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    182.127746582031, -101.950988769531), value=300.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Concrete Beam', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Concrete Beam'].BaseSolidExtrude(depth=2800.0, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=3000.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-600.0, 50.0), 
    point2=(487.5, 50.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    -404.095977783203, -100.045379638672), value=2800.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Rebar', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Rebar'].BaseWire(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='C20/25')
mdb.models['Model-1'].materials['C20/25'].Density(table=((2.4e-09, ), ))
mdb.models['Model-1'].materials['C20/25'].Elastic(table=((20000.0, 0.18), ))
mdb.models['Model-1'].materials['C20/25'].ConcreteDamagedPlasticity(table=((
    31.0, 0.1, 1.16, 0.667, 0.0), ))
mdb.models['Model-1'].materials['C20/25'].concreteDamagedPlasticity.ConcreteCompressionHardening(
    table=((25.0, 0.0), ))
mdb.models['Model-1'].materials['C20/25'].concreteDamagedPlasticity.ConcreteTensionStiffening(
    table=((2.25, 0.0), ))
mdb.models['Model-1'].Material(name='Steel')
mdb.models['Model-1'].materials['Steel'].Density(table=((7.85e-09, ), ))
mdb.models['Model-1'].materials['Steel'].Elastic(table=((210000.0, 0.3), ))
mdb.models['Model-1'].materials['Steel'].Plastic(scaleStress=None, table=((
    350.0, 0.0), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='C20/25', name=
    'concrete CS', thickness=None)
mdb.models['Model-1'].CircularProfile(name='circ', r=7.0)
mdb.models['Model-1'].BeamSection(consistentMassMatrix=False, integration=
    DURING_ANALYSIS, material='Steel', name='rebar CS', poissonRatio=0.3, 
    profile='circ', temperatureVar=LINEAR)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Concrete Beam'].Set(cells=
    mdb.models['Model-1'].parts['Concrete Beam'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Concrete Beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Concrete Beam'].sets['Set-1'], sectionName=
    'concrete CS', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Rebar'].Set(edges=
    mdb.models['Model-1'].parts['Rebar'].edges.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-1')
mdb.models['Model-1'].parts['Rebar'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Rebar'].sets['Set-1'], sectionName='rebar CS', 
    thicknessAssignment=FROM_SECTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Concrete Beam-1', part=mdb.models['Model-1'].parts['Concrete Beam'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Rebar-1', part=
    mdb.models['Model-1'].parts['Rebar'])
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Concrete Beam-1', 
    'Rebar-1'))
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name=
    'Concrete Beam-1', part=mdb.models['Model-1'].parts['Concrete Beam'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Rebar-1', 
    part=mdb.models['Model-1'].parts['Rebar'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(300.0, 
    0.0, 0.0), axisPoint=(0.0, 300.0, 0.0), instanceList=('Concrete Beam-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Concrete Beam-1', )
    , vector=(-300.0, 2500.0, 300.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Concrete Beam-1', )
    , vector=(300.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Rebar-1', ), 
    vector=(-487.5, -50.0, 0.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 10.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('Rebar-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 10.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('Rebar-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Rebar-1', ), 
    vector=(300.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(10.0, 0.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('Rebar-1', ))
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 0.0, 
    10.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('Rebar-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Rebar-1', ), 
    vector=(0.0, -300.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1'].suppress()
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 0.0, 1.0), instanceList=('Rebar-1', ), number1=2, 
    number2=2, spacing1=226.0, spacing2=226.0)
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Rebar-1', 
    'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2'), vector=(37.0, 
    0.0, 37.0))
mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1'].resume()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1'].suppress()
mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1'].resume()
mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1'].suppress()
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='rebars')
mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1'].resume()
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='s_Set-2')
mdb.models['Model-1'].EmbeddedRegion(absoluteTolerance=0.0, embeddedRegion=
    mdb.models['Model-1'].rootAssembly.sets['rebars'], fractionalTolerance=0.05
    , hostRegion=mdb.models['Model-1'].rootAssembly.sets['s_Set-2'], name=
    'embeded rebars', toleranceMethod=BOTH, weightFactorTolerance=1e-06)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 0.0, 1.0), instanceList=('Concrete Beam-1', 
    'Rebar-1', 'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2'), 
    number1=2, number2=2, spacing1=2800.0, spacing2=2800.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-2-1', 
    'Rebar-1-lin-2-1-1', 'Rebar-1-lin-1-2-lin-2-1', 'Rebar-1-lin-2-2-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1'), number1=2, number2=2, spacing1=2800.0, 
    spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-2', 
    'Rebar-1-lin-1-2-lin-2-1-lin-2-1', 'Rebar-1-lin-1-2-lin-2-1-lin-2-2', 
    'Rebar-1-lin-2-2-lin-2-1-lin-2-1', 'Rebar-1-lin-2-2-lin-2-1-lin-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-1-lin-2-2'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-1-2-lin-2-1-lin-1-2', 'Rebar-1-lin-2-2-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-2'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-2-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-2-1-1', 
    'Rebar-1-lin-1-2-lin-2-1', 'Rebar-1-lin-2-2-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Concrete Beam-1-lin-2-2', 
    'Rebar-1-lin-2-2-1', 'Rebar-1-lin-1-2-lin-2-2', 'Rebar-1-lin-2-2-lin-2-2', 
    'Rebar-1-lin-2-1-lin-2-2'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Concrete Beam-1-lin-1-2', 
    'Rebar-1-lin-1-2-1', 'Rebar-1-lin-1-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 0.0, 1.0), instanceList=('Concrete Beam-1', 
    'Rebar-1', 'Rebar-1-lin-2-1'), number1=2, number2=2, spacing1=3100.0, 
    spacing2=3100.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-2-1', 
    'Rebar-1-lin-2-1-1', 'Rebar-1-lin-2-1-lin-2-1'), number1=2, number2=1, 
    spacing1=2000.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 0.0, 
    150.0), axisPoint=(5400.0, 2800.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-2-1', 
    'Rebar-1-lin-2-1-1', 'Rebar-1-lin-2-1-lin-2-1'), number1=2, number2=1, 
    spacing1=2000.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 0.0, 
    150.0), axisPoint=(5400.0, 2800.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), vector=(-2000.0, 300.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), vector=(-3100.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), vector=(0.0, -300.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), number1=1, number2=2, spacing1=2800.0, 
    spacing2=3100.0)
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), number1=1, number2=2, spacing1=2800.0, 
    spacing2=3100.0)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'), vector=(0.0, -2800.0, 3100.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'), vector=(0.0, -300.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), number1=1, number2=2, spacing1=2800.0, 
    spacing2=1000.0)
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-2-1-lin--lin-1-2-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1'), number1=1, number2=2, spacing1=2800.0, 
    spacing2=3100.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 10.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'), vector=(0.0, -3100.0, 3400.0))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'), number1=2, number2=1, spacing1=
    300.0, spacing2=300.0)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', ), vector=(2800.0, 0.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1', 
    'Rebar-1', 'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Rebar-1-lin-1-2-1', 'Rebar-1-lin-2-1-1', 
    'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-1-2', 'Rebar-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'), number1=1, number2=4, spacing1=
    3400.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2', 'Rebar-1-lin-2-2-1-lin-1-3', 
    'Rebar-1-lin-2-2-1-lin-1-4', 'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-5', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1', 
    'Rebar-1', 'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Rebar-1-lin-1-2-1', 'Rebar-1-lin-2-1-1', 
    'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-1-2', 'Rebar-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'), number1=1, number2=4, spacing1=
    3400.0, spacing2=4000.0)
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3', 
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4'), vector=(150.0, 0.0, 3400.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'), vector=(0.0, 0.0, 1400.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'), vector=(0.0, 37.0, -1363.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3', 
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4'), vector=(150.0, 0.0, 300.0))
mdb.models['Model-1'].rootAssembly.Surface(name='column top surf', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#20 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='column bottom surf', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-1-2-1', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-2-1-lin-1-2', 'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5'), vector=(0.0, -1200.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-1-3', 'Rebar-1-lin-1-3', 'Rebar-1-lin-1-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 'Rebar-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-3', 
    'Rebar-1-lin-2-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Concrete Beam-1-lin-1-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin-1-3', 'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3'), vector=(0.0, -2400.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-1-4', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-4', 'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'), vector=(0.0, -3600.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Tie(adjust=ON, main=
    mdb.models['Model-1'].rootAssembly.surfaces['column top surf'], name=
    'column-column', positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['column bottom surf'], 
    thickness=ON, tieRotations=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].constraints['embeded rebars'].suppress()
mdb.models['Model-1'].rootAssembly.PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), normal=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].edges[5]
    , point=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].vertices[4])
#* Feature creation failed.
mdb.models['Model-1'].rootAssembly.PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'].vertices[0]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].edges[9], 
    MIDDLE), point3=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].vertices[4])
mdb.models['Model-1'].rootAssembly.PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].vertices[5]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].edges[9], 
    MIDDLE), point3=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'].vertices[4])
mdb.models['Model-1'].rootAssembly.PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'].vertices[0]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'].edges[9], 
    MIDDLE), point3=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'].vertices[4])
mdb.models['Model-1'].rootAssembly.PartitionCellByPlaneThreePoints(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), point1=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'].vertices[0]
    , point2=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'].edges[9], 
    MIDDLE), point3=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'].vertices[4])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Surface(name='column lateral surf', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#50 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#12 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#12 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#50 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#50 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].faces.getSequenceFromMask(
    mask=('[#12 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].faces.getSequenceFromMask(
    mask=('[#12 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#50 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#82 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'].faces.getSequenceFromMask(
    mask=('[#c0 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#82 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].faces.getSequenceFromMask(
    mask=('[#c0 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#c0 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#82 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].faces.getSequenceFromMask(
    mask=('[#c0 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].faces.getSequenceFromMask(
    mask=('[#82 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='beam lateral surf', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-3'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-3'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-5'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-2-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-1'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-3'].faces.getSequenceFromMask(
    mask=('[#30 ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'), vector=(-300.0, -37.0, -3737.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.suppressFeatures(('Concrete Beam-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'))
mdb.models['Model-1'].rootAssembly.resumeFeatures((
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2'))
mdb.models['Model-1'].rootAssembly.suppressFeatures((
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2'))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='rebars')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='rebars')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='rebars')
mdb.models['Model-1'].rootAssembly.suppressFeatures(('Concrete Beam-1', 
    'Rebar-1', 'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Rebar-1-lin-1-2-1', 'Rebar-1-lin-2-1-1', 
    'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-1-2', 'Rebar-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 'Rebar-1-lin-1-2-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Concrete Beam-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4'))
mdb.models['Model-1'].rootAssembly.resumeFeatures((
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'))
mdb.models['Model-1'].rootAssembly.resumeFeatures((
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2'))
mdb.models['Model-1'].rootAssembly.suppressFeatures(('Rebar-1-lin-1-3', 
    'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 'Rebar-1-lin-1-2-lin-1-3', 
    'Rebar-1-lin-1-2-lin-1-4', 'Rebar-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-2-lin-1-3', 'Rebar-1-lin-2-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2'))
mdb.models['Model-1'].rootAssembly.suppressFeatures((
    'Rebar-1-lin-2-2-1-lin-1-3', 'Rebar-1-lin-2-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'))
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-5'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='concrete')
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-5'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='concrete')
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1', 
    'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-1', 'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-1', 'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1-lin-2-2-1-lin-1-3', 
    'Rebar-1-lin-2-2-1-lin-1-4', 'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.suppressFeatures(('Rebar-1', 
    'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2', 
    'Rebar-1-lin-1-2-1', 'Rebar-1-lin-2-1-1', 'Rebar-1-lin-2-2-1', 
    'Rebar-1-lin-2-1-lin-1-2', 'Rebar-1-lin-2-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-2', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2', 'Rebar-1-lin-2-2-1-lin-1-3', 
    'Rebar-1-lin-2-2-1-lin-1-4', 'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'))
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-5'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-3'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='Set-Concrete')
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1', 
    'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-1', 'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-lin-2-2', 
    'Concrete Beam-1-lin-2-1-lin-2-1', 'Rebar-1-lin-2-1-1-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin-2-1', 'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 'Rebar-1-lin-1-2-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Concrete Beam-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2', 'Rebar-1-lin-2-2-1-lin-1-3', 
    'Rebar-1-lin-2-2-1-lin-1-4', 'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'))
mdb.models['Model-1'].rootAssembly.suppressFeatures(('Concrete Beam-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5'))
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='Set-rebars')
mdb.models['Model-1'].rootAssembly.resumeFeatures((
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3'))
mdb.models['Model-1'].rootAssembly.resumeFeatures((
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4'))
mdb.models['Model-1'].rootAssembly.resumeFeatures((
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 'Concrete Beam-1-lin-1-4', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Tie(adjust=ON, main=
    mdb.models['Model-1'].rootAssembly.surfaces['column lateral surf'], name=
    'column-beam', positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['beam lateral surf'], 
    thickness=ON, tieRotations=ON)
del mdb.models['Model-1'].constraints['embeded rebars']
mdb.models['Model-1'].EmbeddedRegion(absoluteTolerance=0.0, embeddedRegion=
    mdb.models['Model-1'].rootAssembly.sets['Set-rebars'], fractionalTolerance=
    0.05, hostRegion=mdb.models['Model-1'].rootAssembly.sets['Set-Concrete'], 
    name='embeded rebars', toleranceMethod=BOTH, weightFactorTolerance=1e-06)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ImplicitDynamicsStep(name='Earthquake Step', previous=
    'Initial')
mdb.models['Model-1'].TabularAmplitude(data=((0.0, -0.0595), (0.002, 0.0399), (
    0.004, 0.0398), (0.006, 0.0472), (0.008, 0.0471), (0.01, 0.0521), (0.012, 
    0.042), (0.014, 0.0593), (0.016, 0.0593), (0.018, 0.0642), (0.02, 0.0766), 
    (0.022, 0.0841), (0.024, 0.0815), (0.026, 0.0814), (0.028, 0.0463), (0.03, 
    0.0387), (0.032, 0.0237), (0.034, 0.0161), (0.036, 0.006), (0.038, 0.011), 
    (0.04, 0.0159), (0.042, 0.0208), (0.044, 0.0257), (0.046, 0.0332), (0.048, 
    0.0456), (0.05, 0.0755), (0.052, 0.1005), (0.054, 0.1054), (0.056, 0.1003), 
    (0.058, 0.1027), (0.06, 0.0926), (0.062, 0.0851), (0.064, 0.075), (0.066, 
    0.0575), (0.068, 0.0549), (0.07, 0.0723), (0.072, 0.0772), (0.074, 0.0947), 
    (0.076, 0.0896), (0.078, 0.0871), (0.08, 0.0745), (0.082, 0.0645), (0.084, 
    0.0369), (0.086, 0.0043), (0.088, -0.0058), (0.09, -0.0058), (0.092, 
    -0.0058), (0.094, -0.0009), (0.096, 0.0315), (0.098, 0.0839), (0.1, 
    0.0714), (0.102, 0.0338), (0.104, -0.0262), (0.106, -0.0862), (0.108, 
    -0.0688), (0.11, -0.0439), (0.112, 0.0236), (0.114, 0.051), (0.116, 
    0.0384), (0.118, 0.0134), (0.12, -0.0266), (0.122, -0.0792), (0.124, 
    -0.0392), (0.126, 0.0507), (0.128, 0.0306), (0.13, 0.0031), (0.132, 
    -0.0244), (0.134, -0.042), (0.136, -0.0345), (0.138, -0.0395), (0.14, 
    -0.0196), (0.142, 0.0054), (0.144, 0.0278), (0.146, 0.0528), (0.148, 
    0.1002), (0.15, 0.1277), (0.152, 0.1502), (0.154, 0.1626), (0.156, 0.1675), 
    (0.158, 0.13), (0.16, 0.1025), (0.162, 0.0675), (0.164, 0.0349), (0.166, 
    -0.0051), (0.168, -0.1151), (0.17, -0.0952), (0.172, -0.0502), (0.174, 
    -0.0052), (0.176, 0.0172), (0.178, 0.0222), (0.18, -0.0053), (0.182, 
    -0.0578), (0.184, -0.0379), (0.186, 0.0046), (0.188, 0.0396), (0.19, 
    0.0696), (0.192, 0.0845), (0.194, 0.072), (0.196, 0.022), (0.198, -0.0055), 
    (0.2, -0.043), (0.202, -0.0455), (0.204, -0.0556), (0.206, -0.0706), (
    0.208, -0.0606), (0.21, -0.0081), (0.212, 0.0094), (0.214, 0.0468), (0.216, 
    0.0368), (0.218, 0.0468), (0.22, 0.0618), (0.222, 0.0743), (0.224, 0.0868), 
    (0.226, 0.0893), (0.228, 0.0718), (0.23, 0.0418), (0.232, -0.0032), (0.234, 
    -0.0257), (0.236, -0.0132), (0.238, 0.0418), (0.24, 0.0818), (0.242, 
    0.0718), (0.244, 0.0093), (0.246, -0.0657), (0.248, -0.0907), (0.25, 
    -0.1132), (0.252, -0.1032), (0.254, -0.0857), (0.256, -0.0557), (0.258, 
    -0.0357), (0.26, -0.0232), (0.262, -0.0256), (0.264, 0.0019), (0.266, 
    0.0319), (0.268, 0.0244), (0.27, 0.0219), (0.272, 0.0119), (0.274, 
    -0.0105), (0.276, -0.0155), (0.278, -0.0405), (0.28, -0.078), (0.282, 
    -0.0579), (0.284, -0.0054), (0.286, 0.0346), (0.288, 0.0896), (0.29, 
    0.1396), (0.292, 0.1722), (0.294, 0.1472), (0.296, 0.0998), (0.298, 
    0.0548), (0.3, 0.0098), (0.302, -0.0101), (0.304, 0.0049), (0.306, 0.0125), 
    (0.308, 0.045), (0.31, 0.0701), (0.312, 0.0951), (0.314, 0.0851), (0.316, 
    0.0702), (0.318, 0.0477), (0.32, 0.0203), (0.322, 0.0404), (0.324, 0.0454), 
    (0.326, 0.018), (0.328, -0.0245), (0.33, -0.0894), (0.332, -0.1469), (
    0.334, -0.1893), (0.336, -0.1567), (0.338, -0.1366), (0.34, -0.1441), (
    0.342, -0.154), (0.344, -0.159), (0.346, -0.1339), (0.348, -0.0714), (0.35, 
    -0.0262), (0.352, -0.0362), (0.354, -0.0636), (0.356, -0.1035), (0.358, 
    -0.1134), (0.36, -0.0734), (0.362, -0.1058), (0.364, -0.1557), (0.366, 
    -0.1856), (0.368, -0.2205), (0.37, -0.1829), (0.372, -0.1079), (0.374, 
    -0.0353), (0.376, 0.0198), (0.378, 0.1149), (0.38, 0.135), (0.382, 0.1151), 
    (0.384, 0.0627), (0.386, 0.0178), (0.388, 0.0054), (0.39, 0.0155), (0.392, 
    0.0257), (0.394, 0.0558), (0.396, 0.0858), (0.398, 0.1484), (0.4, 0.2185), 
    (0.402, 0.2461), (0.404, 0.2437), (0.406, 0.1864), (0.408, 0.1291), (0.41, 
    0.0842), (0.412, 0.0068), (0.414, -0.0956), (0.416, -0.1805), (0.418, 
    -0.2104), (0.42, -0.1601), (0.422, -0.0725), (0.424, 0.0151), (0.426, 
    -0.0348), (0.428, -0.1122), (0.43, -0.1595), (0.432, -0.1694), (0.434, 
    -0.1342), (0.436, -0.0841), (0.438, -0.0239), (0.44, -0.0213), (0.442, 
    -0.0587), (0.444, -0.0785), (0.446, -0.1184), (0.448, -0.1081), (0.45, 
    -0.053), (0.452, 0.0321), (0.454, 0.0948), (0.456, 0.1399), (0.458, 0.2), (
    0.46, 0.2551), (0.462, 0.2779), (0.464, 0.2131), (0.466, 0.1907), (0.468, 
    0.2609), (0.47, 0.3835), (0.472, 0.4787), (0.474, 0.5213), (0.476, 0.5741), 
    (0.478, 0.5618), (0.48, 0.432), (0.482, 0.2696), (0.484, 0.1248), (0.486, 
    0.0675), (0.488, -0.0048), (0.49, 0.053), (0.492, 0.1407), (0.494, 0.2333), 
    (0.496, 0.281), (0.498, 0.3487), (0.5, 0.4863), (0.502, 0.569), (0.504, 
    0.6518), (0.506, 0.692), (0.508, 0.6672), (0.51, 0.5224), (0.512, 0.1701), 
    (0.514, -0.1746), (0.516, -0.4394), (0.518, -0.7865), (0.52, -1.0112), (
    0.522, -1.151), (0.524, -1.2608), (0.526, -1.3431), (0.528, -1.4179), (
    0.53, -1.4827), (0.532, -1.7847), (0.534, -1.8995), (0.536, -1.9493), (
    0.538, -1.9116), (0.54, -1.8714), (0.542, -1.7987), (0.544, -1.6935), (
    0.546, -1.6206), (0.548, -1.6853), (0.55, -1.7676), (0.552, -1.8124), (
    0.554, -1.8447), (0.556, -1.8169), (0.558, -1.7717), (0.56, -1.6913), (
    0.562, -1.6911), (0.564, -1.6933), (0.566, -1.4481), (0.568, -1.098), (
    0.57, -0.6528), (0.572, -0.1202), (0.574, 0.6502), (0.576, 1.0054), (0.578, 
    1.2256), (0.58, 1.3558), (0.582, 1.4335), (0.584, 1.4713), (0.586, 1.4915), 
    (0.588, 1.5145), (0.59, 1.5622), (0.592, 1.605), (0.594, 1.6577), (0.596, 
    1.7154), (0.598, 1.7507), (0.6, 1.7709), (0.602, 1.7565), (0.604, 1.6867), 
    (0.606, 1.5995), (0.608, 1.4773), (0.61, 1.3376), (0.612, 1.2428), (0.614, 
    1.1731), (0.616, 1.1761), (0.618, 1.2064), (0.62, 1.2417), (0.622, 1.2894), 
    (0.624, 1.3272), (0.626, 1.37), (0.628, 1.3702), (0.63, 1.1958), (0.632, 
    1.1086), (0.634, 1.0239), (0.636, 0.8517), (0.638, 0.5821), (0.64, 0.1999), 
    (0.642, -0.1398), (0.644, -0.7041), (0.646, -0.7913), (0.648, -0.771), (
    0.65, -0.7132), (0.652, -0.6305), (0.654, -0.5552), (0.656, -0.5324), (
    0.658, -0.5118), (0.66, -0.494), (0.662, -0.4612), (0.664, -0.3709), (
    0.666, -0.2707), (0.668, -0.1904), (0.67, -0.0651), (0.672, 0.088), (0.674, 
    0.1108), (0.676, 0.0736), (0.678, -0.0311), (0.68, -0.2107), (0.682, 
    -0.4379), (0.684, -0.6851), (0.686, -0.7869), (0.688, -0.7866), (0.69, 
    -0.7713), (0.692, -0.741), (0.694, -0.7457), (0.696, -0.8028), (0.698, 
    -0.8525), (0.7, -0.8794), (0.702, -0.9015), (0.704, -0.8837), (0.706, 
    -0.8259), (0.708, -0.7181), (0.71, -0.4978), (0.712, -0.2125), (0.714, 
    0.1106), (0.716, 0.1884), (0.718, 0.2562), (0.72, 0.279), (0.722, 0.2593), 
    (0.724, 0.2022), (0.726, 0.13), (0.728, 0.1582), (0.73, 0.1135), (0.732, 
    0.0913), (0.734, 0.1042), (0.736, 0.0395), (0.738, -0.1901), (0.74, 
    -0.2873), (0.742, -0.2316), (0.744, -0.0413), (0.746, 0.1315), (0.748, 
    0.2593), (0.75, 0.3222), (0.752, 0.3875), (0.754, 0.4353), (0.756, 0.4135), 
    (0.758, 0.3264), (0.76, 0.2667), (0.762, 0.2821), (0.764, 0.2949), (0.766, 
    0.3052), (0.768, 0.3181), (0.77, 0.3063), (0.772, 0.2841), (0.774, 0.2695), 
    (0.776, 0.3148), (0.778, 0.4002), (0.78, 0.548), (0.782, 0.6158), (0.784, 
    0.379), (0.786, 0.052), (0.788, -0.3051), (0.79, -0.4773), (0.792, 
    -0.5169), (0.794, -0.4666), (0.796, -0.3737), (0.798, -0.343), (0.8, 
    -0.3877), (0.802, -0.4223), (0.804, -0.4395), (0.806, -0.4691), (0.808, 
    -0.4288), (0.81, -0.3534), (0.812, -0.1678), (0.814, -0.1274), (0.816, 
    -0.0946), (0.818, -0.0767), (0.82, -0.1014), (0.822, -0.111), (0.824, 
    -0.0856), (0.826, 0.08), (0.828, 0.0929), (0.83, 0.0757), (0.832, 0.0386), 
    (0.834, 0.0239), (0.836, 0.0193), (0.838, -0.0328), (0.84, -0.2121), (
    0.842, -0.3567), (0.844, -0.4814), (0.846, -0.556), (0.848, -0.5831), (
    0.85, -0.5428), (0.852, -0.4075), (0.854, 0.1681), (0.856, 0.4909), (0.858, 
    0.6713), (0.86, 0.7666), (0.862, 0.7545), (0.864, 0.6773), (0.866, 0.4727), 
    (0.868, 0.3284), (0.87, 0.3288), (0.872, 0.3466), (0.874, 0.3395), (0.876, 
    0.3373), (0.878, 0.3501), (0.88, 0.3905), (0.882, 0.4837), (0.884, 0.4665), 
    (0.886, 0.4069), (0.888, 0.3172), (0.89, 0.2426), (0.892, 0.1929), (0.894, 
    0.1433), (0.896, 0.054), (0.898, 0.0568), (0.9, 0.1047), (0.902, 0.1775), (
    0.904, 0.2153), (0.906, 0.2732), (0.908, 0.271), (0.91, -0.0658), (0.912, 
    -0.2904), (0.914, -0.3401), (0.916, -0.3197), (0.918, -0.2719), (0.92, 
    -0.2416), (0.922, -0.2462), (0.924, -0.4855), (0.926, -0.5752), (0.928, 
    -0.6248), (0.93, -0.6745), (0.932, -0.7092), (0.934, -0.7238), (0.936, 
    -0.7385), (0.938, -0.7254), (0.94, -0.6575), (0.942, -0.5697), (0.944, 
    -0.4294), (0.946, -0.3366), (0.948, -0.2838), (0.95, -0.236), (0.952, 
    -0.2304), (0.954, -0.295), (0.956, -0.3672), (0.958, -0.4394), (0.96, 
    -0.4516), (0.962, -0.4512), (0.964, -0.3934), (0.966, -0.1429), (0.968, 
    -0.0001), (0.97, 0.0927), (0.972, 0.168), (0.974, 0.1458), (0.976, 0.1186), 
    (0.978, 0.0789), (0.98, 0.0595), (0.982, 0.1198), (0.984, 0.1926), (0.986, 
    0.2179), (0.988, 0.2457), (0.99, 0.2435), (0.992, 0.2638), (0.994, 0.2894), 
    (0.996, 0.3296), (0.998, 0.3849), (1.0, 0.4552), (1.002, 0.5305), (1.004, 
    0.5682), (1.006, 0.5785), (1.008, 0.4191), (1.01, 0.2719), (1.012, 0.1947), 
    (1.014, 0.1825), (1.016, 0.2002), (1.018, 0.2455), (1.02, 0.2783), (1.022, 
    0.3338), (1.024, 0.3441), (1.026, 0.3618), (1.028, 0.3646), (1.03, 0.3349), 
    (1.032, 0.3026), (1.034, 0.2104), (1.036, 0.0034), (1.038, -0.1388), (1.04, 
    -0.221), (1.042, -0.2308), (1.044, -0.1855), (1.046, -0.1003), (1.048, 
    0.0499), (1.05, 0.1304), (1.052, 0.1406), (1.054, 0.1734), (1.056, 0.1736), 
    (1.058, 0.1713), (1.06, 0.1466), (1.062, 0.1093), (1.064, -0.1002), (1.066, 
    -0.215), (1.068, -0.2772), (1.07, -0.3145), (1.072, -0.3243), (1.074, 
    -0.2966), (1.076, -0.2389), (1.078, -0.066), (1.08, 0.0667), (1.082, 
    0.0819), (1.084, 0.0271), (1.086, -0.0776), (1.088, -0.2049), (1.09, 
    -0.2447), (1.092, -0.2843), (1.094, -0.2191), (1.096, -0.1265), (1.098, 
    -0.0513), (1.1, 0.0239), (1.102, 0.0741), (1.104, 0.1417), (1.106, 0.1946), 
    (1.108, 0.1698), (1.11, 0.0125), (1.112, -0.1498), (1.114, -0.2496), (
    1.116, -0.292), (1.118, -0.3218), (1.12, -0.3315), (1.122, -0.2638), (
    1.124, -0.1562), (1.126, -0.106), (1.128, -0.0834), (1.13, -0.0782), (
    1.132, -0.1056), (1.134, -0.1128), (1.136, -0.0852), (1.138, -0.045), (
    1.14, 0.0151), (1.142, 0.0427), (1.144, 0.0529), (1.146, 0.0355), (1.148, 
    -0.0093), (1.15, -0.0316), (1.152, -0.0065), (1.154, 0.0486), (1.156, 
    0.0912), (1.158, 0.1363), (1.16, 0.2514), (1.162, 0.4666), (1.164, 0.5617), 
    (1.166, 0.6093), (1.168, 0.6219), (1.17, 0.5969), (1.172, 0.4621), (1.174, 
    0.3522), (1.176, 0.1024), (1.178, 0.055), (1.18, 0.0151), (1.182, -0.0099), 
    (1.184, -0.0098), (1.186, 0.0153), (1.188, 0.0279), (1.19, 0.043), (1.192, 
    0.068), (1.194, 0.0931), (1.196, 0.1007), (1.198, 0.1282), (1.2, 0.1633), (
    1.202, 0.1633), (1.204, -0.1291), (1.206, -0.1615), (1.208, -0.1489), (
    1.21, -0.1464), (1.212, -0.1439), (1.214, -0.1464), (1.216, -0.1613), (
    1.218, -0.1388), (1.22, -0.1038), (1.222, -0.0763), (1.224, 0.0188), (
    1.226, 0.0638), (1.228, 0.0988), (1.23, 0.1313), (1.232, 0.1713), (1.234, 
    0.1638), (1.236, 0.1213), (1.238, 0.0563), (1.24, -0.1112), (1.242, 
    -0.2687), (1.244, -0.3737), (1.246, -0.3762), (1.248, -0.3038), (1.25, 
    -0.1788), (1.252, -0.0289), (1.254, 0.1036), (1.256, 0.156), (1.258, 
    0.201), (1.26, 0.1759), (1.262, 0.1309), (1.264, 0.0184), (1.266, -0.0692), 
    (1.268, -0.1292), (1.27, -0.1618), (1.272, -0.1468), (1.274, 0.0305), (
    1.276, 0.1429), (1.278, 0.2528), (1.28, 0.3403), (1.282, 0.3877), (1.284, 
    0.3676), (1.286, 0.3425), (1.288, 0.3024), (1.29, 0.2873), (1.292, 0.2922), 
    (1.294, 0.2996), (1.296, 0.3045), (1.298, 0.3094), (1.3, 0.3093), (1.302, 
    0.3416), (1.304, 0.3065), (1.306, 0.2388), (1.308, 0.1513), (1.31, 0.0161), 
    (1.312, -0.0965), (1.314, -0.274), (1.316, -0.3293), (1.318, -0.2894), (
    1.32, -0.2521), (1.322, -0.1772), (1.324, -0.1349), (1.326, -0.09), (1.328, 
    -0.0227), (1.33, 0.067), (1.332, 0.0993), (1.334, 0.0742), (1.336, 0.009), 
    (1.338, -0.1111), (1.34, -0.1763), (1.342, -0.2114), (1.344, -0.2593), (
    1.346, -0.2595), (1.348, -0.2521), (1.35, -0.2423), (1.352, -0.22), (1.354, 
    -0.1902), (1.356, -0.1429), (1.358, -0.0733), (1.36, -0.061), (1.362, 
    -0.0662), (1.364, -0.0539), (1.366, -0.0366), (1.368, -0.0119), (1.37, 
    0.0554), (1.372, 0.1875), (1.374, 0.2622), (1.376, 0.3395), (1.378, 
    0.3718), (1.38, 0.394), (1.382, 0.3813), (1.384, 0.3511), (1.386, 0.2106), 
    (1.388, 0.1554), (1.39, 0.0776), (1.392, 0.0374), (1.394, 0.0047), (1.396, 
    -0.0206), (1.398, -0.0483), (1.4, -0.1313), (1.402, -0.1591), (1.404, 
    -0.1644), (1.406, -0.1447), (1.408, -0.0574), (1.41, 0.0273), (1.412, 
    0.1044), (1.414, 0.2539), (1.416, 0.2986), (1.418, 0.3258), (1.42, 0.323), 
    (1.422, 0.2977), (1.424, 0.1824), (1.426, 0.0247), (1.428, -0.1209), (1.43, 
    -0.1237), (1.432, -0.094), (1.434, -0.0293), (1.436, 0.0153), (1.438, 
    0.0325), (1.44, -0.0603), (1.442, -0.2634), (1.444, -0.2812), (1.446, 
    -0.254), (1.448, -0.2369), (1.45, -0.2522), (1.452, -0.265), (1.454, 
    -0.2854), (1.456, -0.2786), (1.458, -0.2339), (1.46, -0.1968), (1.462, 
    -0.1271), (1.464, -0.06), (1.466, 0.0071), (1.468, 0.0793), (1.47, 0.191), 
    (1.472, 0.2131), (1.474, 0.2028), (1.476, 0.1774), (1.478, 0.0546), (1.48, 
    -0.0708), (1.482, -0.1687), (1.484, -0.1944), (1.486, -0.1548), (1.488, 
    -0.0827), (1.49, -0.0156), (1.492, 0.034), (1.494, 0.0736), (1.496, 
    0.0907), (1.498, 0.0524), (1.5, -0.0005), (1.502, -0.0434), (1.504, 
    -0.0588), (1.506, -0.0542), (1.508, -0.0146), (1.51, 0.055), (1.512, 
    0.2091), (1.514, 0.2562), (1.516, 0.2883), (1.518, 0.2704), (1.52, 0.2199), 
    (1.522, 0.1545), (1.524, 0.0641), (1.526, -0.1492), (1.528, -0.1896), (
    1.53, -0.2151), (1.532, -0.1905), (1.534, -0.1535), (1.536, -0.1564), (
    1.538, -0.1419), (1.54, -0.1103), (1.542, -0.0757), (1.544, -0.0212), (
    1.546, 0.0459), (1.548, -0.0021), (1.55, -0.085), (1.552, -0.118), (1.554, 
    -0.0814), (1.556, -0.0094), (1.558, 0.0576), (1.56, 0.0772), (1.562, 
    0.1067), (1.564, 0.1237), (1.566, 0.1307), (1.568, 0.0998), (1.57, 0.0743), 
    (1.572, -0.0087), (1.574, -0.1641), (1.576, -0.2446), (1.578, -0.2626), (
    1.58, -0.2481), (1.582, -0.1916), (1.584, -0.1645), (1.586, -0.1475), (
    1.588, -0.1031), (1.59, -0.0486), (1.592, 0.0259), (1.594, 0.0804), (1.596, 
    0.1344), (1.598, 0.1564), (1.6, 0.1709), (1.602, 0.1679), (1.604, 0.1624), 
    (1.606, 0.1394), (1.608, 0.1014), (1.61, -0.0047), (1.612, -0.0427), (
    1.614, -0.0532), (1.616, -0.0562), (1.618, -0.0292), (1.62, -0.0173), (
    1.622, -0.0028), (1.624, -0.0113), (1.626, -0.0319), (1.628, -0.0124), (
    1.63, 0.0146), (1.632, 0.074), (1.634, 0.1485), (1.636, 0.2004), (1.638, 
    0.3318), (1.64, 0.4138), (1.642, 0.4482), (1.644, 0.4802), (1.646, 0.4647), 
    (1.648, 0.4116), (1.65, 0.3136), (1.652, 0.09), (1.654, -0.0105), (1.656, 
    -0.056), (1.658, -0.0466), (1.66, -0.0397), (1.662, -0.0202), (1.664, 
    -0.0233), (1.666, -0.0469), (1.668, -0.0374), (1.67, -0.013), (1.672, 
    0.0065), (1.674, 0.0359), (1.676, 0.0203), (1.678, -0.0277), (1.68, 
    -0.1288), (1.682, -0.1544), (1.684, -0.1899), (1.686, -0.213), (1.688, 
    -0.2361), (1.69, -0.2241), (1.692, -0.1922), (1.694, -0.0859), (1.696, 
    -0.0764), (1.698, -0.057), (1.7, -0.0476), (1.702, -0.0381), (1.704, 
    -0.0387), (1.706, -0.0493), (1.708, -0.1179), (1.71, -0.186), (1.712, 
    -0.239), (1.714, -0.2746), (1.716, -0.2802), (1.718, -0.2633), (1.72, 
    -0.2413), (1.722, -0.2075), (1.724, -0.2006), (1.726, -0.1862), (1.728, 
    -0.1742), (1.73, -0.1548), (1.732, -0.1054), (1.734, -0.076), (1.736, 
    0.0128), (1.738, 0.0722), (1.74, 0.1391), (1.742, 0.1811), (1.744, 0.203), 
    (1.746, 0.1874), (1.748, 0.1618), (1.75, 0.0732), (1.752, -0.0649), (1.754, 
    -0.1355), (1.756, -0.1236), (1.758, -0.1267), (1.76, -0.1047), (1.762, 
    -0.0678), (1.764, 0.036), (1.766, 0.0779), (1.768, 0.1348), (1.77, 0.1142), 
    (1.772, 0.1011), (1.774, 0.0456), (1.776, 0.0175), (1.778, 0.0788), (1.78, 
    0.1457), (1.782, 0.1351), (1.784, 0.122), (1.786, 0.074), (1.788, 0.0434), 
    (1.79, -0.0172), (1.792, -0.0784), (1.794, -0.0415), (1.796, 0.003), (
    1.798, 0.0524), (1.8, 0.0943), (1.802, 0.1287), (1.804, 0.1756), (1.806, 
    0.2519), (1.808, 0.2938), (1.81, 0.3157), (1.812, 0.3027), (1.814, 0.2646), 
    (1.816, 0.189), (1.818, 0.1384), (1.82, -0.0377), (1.822, -0.1183), (1.824, 
    -0.1538), (1.826, -0.1594), (1.828, -0.1425), (1.83, -0.1081), (1.832, 
    -0.0937), (1.834, -0.0773), (1.836, -0.0704), (1.838, -0.086), (1.84, 
    -0.0841), (1.842, -0.0971), (1.844, -0.1152), (1.846, -0.1308), (1.848, 
    -0.2344), (1.85, -0.28), (1.852, -0.298), (1.854, -0.3086), (1.856, 
    -0.3142), (1.858, -0.3223), (1.86, -0.3278), (1.862, -0.3215), (1.864, 
    -0.312), (1.866, -0.2926), (1.868, -0.2482), (1.87, -0.2088), (1.872, 
    -0.1118), (1.874, -0.0199), (1.876, 0.0464), (1.878, 0.0959), (1.88, 
    0.1253), (1.882, 0.1322), (1.884, 0.1067), (1.886, 0.0561), (1.888, 
    0.0106), (1.89, -0.058), (1.892, -0.1036), (1.894, -0.1541), (1.896, 
    -0.1947), (1.898, -0.2252), (1.9, -0.2408), (1.902, -0.2613), (1.904, 
    -0.2449), (1.906, -0.188), (1.908, -0.1185), (1.91, -0.0516), (1.912, 
    0.0054), (1.914, 0.0423), (1.916, 0.0418), (1.918, 0.0757), (1.92, 0.1051), 
    (1.922, 0.1221), (1.924, 0.139), (1.926, 0.1385), (1.928, 0.118), (1.93, 
    0.0899), (1.932, -0.0111), (1.934, -0.0041), (1.936, 0.0053), (1.938, 
    -0.0102), (1.94, -0.0482), (1.942, -0.0787), (1.944, -0.1042), (1.946, 
    -0.0653), (1.948, -0.0308), (1.95, 0.0461), (1.952, 0.1031), (1.954, 
    0.1026), (1.956, 0.0671), (1.958, 0.0016), (1.96, -0.0519), (1.962, 
    -0.0349), (1.964, 0.0095), (1.966, 0.0765), (1.968, 0.1085), (1.97, 0.123), 
    (1.972, 0.1325), (1.974, 0.1365), (1.976, 0.1285), (1.978, 0.1405), (1.98, 
    0.125), (1.982, 0.1195), (1.984, 0.0665), (1.986, 0.016), (1.988, -0.1499), 
    (1.99, -0.1854), (1.992, -0.1884), (1.994, -0.2139), (1.996, -0.2118), (
    1.998, -0.2148), (2.0, -0.2003), (2.002, -0.1763), (2.004, -0.1318), (
    2.006, -0.0822), (2.008, -0.0027), (2.01, 0.0318), (2.012, 0.0763), (2.014, 
    0.0684), (2.016, 0.0624), (2.018, 0.062), (2.02, 0.0815), (2.022, 0.0885), 
    (2.024, 0.1131), (2.026, 0.1276), (2.028, 0.1347), (2.03, 0.1163), (2.032, 
    0.0883), (2.034, 0.0379), (2.036, -0.025), (2.038, -0.128), (2.04, 
    -0.1234), (2.042, -0.1314), (2.044, -0.1547), (2.046, -0.1627), (2.048, 
    -0.1731), (2.05, -0.166), (2.052, -0.1515), (2.054, -0.1194), (2.056, 
    -0.0873), (2.058, -0.0082), (2.06, 0.0164), (2.062, 0.0435), (2.064, 
    0.0606), (2.066, 0.0576), (2.068, 0.0447), (2.07, 0.0168), (2.072, -0.049), 
    (2.074, -0.0819), (2.076, -0.1147), (2.078, -0.1651), (2.08, -0.1555), (
    2.082, -0.1434), (2.084, -0.0988), (2.086, 0.0229), (2.088, 0.085), (2.09, 
    0.0946), (2.092, 0.0567), (2.094, 0.0289), (2.096, -0.014), (2.098, 
    -0.0394), (2.1, 0.0224), (2.102, 0.0595), (2.104, 0.0966), (2.106, 0.1163), 
    (2.108, 0.0984), (2.11, 0.0806), (2.112, 0.0577), (2.114, 0.017), (2.116, 
    0.0242), (2.118, 0.0313), (2.12, 0.041), (2.122, 0.0556), (2.124, 0.0728), 
    (2.126, 0.09), (2.128, 0.1068), (2.13, 0.089), (2.132, 0.0661), (2.134, 
    0.0383), (2.136, 0.023), (2.138, 0.0077), (2.14, 0.0023), (2.142, -0.0458), 
    (2.144, -0.0811), (2.146, -0.1039), (2.148, -0.1142), (2.15, -0.0945), (
    2.152, -0.0648), (2.154, -0.0177), (2.156, 0.0318), (2.158, -0.006), (2.16, 
    -0.0238), (2.162, -0.0041), (2.164, 0.0156), (2.166, 0.0453), (2.168, 
    0.065), (2.17, 0.0569), (2.172, 0.0491), (2.174, 0.0389), (2.176, 0.0536), 
    (2.178, 0.0883), (2.18, 0.108), (2.182, 0.1353), (2.184, 0.1422), (2.186, 
    0.1295), (2.188, 0.1267), (2.19, 0.119), (2.192, 0.1062), (2.194, 0.0785), 
    (2.196, 0.0732), (2.198, 0.1202), (2.2, 0.1599), (2.202, 0.1847), (2.204, 
    0.2044), (2.206, 0.2167), (2.208, 0.209), (2.21, 0.2013), (2.212, 0.0933), 
    (2.214, 0.0631), (2.216, 0.0703), (2.218, 0.0751), (2.22, 0.0624), (2.222, 
    0.0397), (2.224, 0.002), (2.226, -0.0434), (2.228, -0.0511), (2.23, 
    -0.0513), (2.232, -0.0191), (2.234, -0.0093), (2.236, 0.0155), (2.238, 
    0.0253), (2.24, 0.0349), (2.242, 0.0248), (2.244, -0.0104), (2.246, 
    -0.0381), (2.248, -0.0658), (2.25, -0.0835), (2.252, -0.0786), (2.254, 
    -0.089), (2.256, -0.1442), (2.258, -0.1568), (2.26, -0.1995), (2.262, 
    -0.2396), (2.264, -0.2698), (2.266, -0.2875), (2.268, -0.2653), (2.27, 
    -0.2554), (2.272, -0.2156), (2.274, -0.1658), (2.276, -0.1184), (2.278, 
    -0.0836), (2.28, -0.0212), (2.282, 0.0585), (2.284, 0.0733), (2.286, 
    0.0807), (2.288, 0.0781), (2.29, 0.0704), (2.292, 0.0478), (2.294, 0.0077), 
    (2.296, -0.04), (2.298, -0.0252), (2.3, -0.0153), (2.302, -0.0054), (2.304, 
    0.022), (2.306, 0.0344), (2.308, 0.0367), (2.31, 0.0515), (2.312, 0.0714), 
    (2.314, 0.0838), (2.316, 0.0887), (2.318, 0.1036), (2.32, 0.0985), (2.322, 
    0.0934), (2.324, 0.0658), (2.326, 0.0457), (2.328, 0.0531), (2.33, 0.068), 
    (2.332, 0.0829), (2.334, 0.0954), (2.336, 0.1078), (2.338, 0.1051), (2.34, 
    0.0851), (2.342, 0.07), (2.344, 0.0599), (2.346, 0.0449), (2.348, 0.0298), 
    (2.35, 0.0298), (2.352, 0.0472), (2.354, 0.0521), (2.356, 0.0696), (2.358, 
    0.0845), (2.36, 0.0919), (2.362, 0.0919), (2.364, 0.1069), (2.366, 0.1168), 
    (2.368, 0.1367), (2.37, 0.1517), (2.372, 0.1667), (2.374, 0.1716), (2.376, 
    0.1816), (2.378, 0.1516), (2.38, 0.0716), (2.382, 0.0391), (2.384, 0.039), 
    (2.386, 0.064), (2.388, 0.0815), (2.39, 0.089), (2.392, 0.0815), (2.394, 
    0.0115), (2.396, -0.046), (2.398, -0.076), (2.4, -0.0585), (2.402, -0.046), 
    (2.404, -0.036), (2.406, -0.0285), (2.408, -0.041), (2.41, -0.061), (2.412, 
    -0.086), (2.414, -0.1009), (2.416, -0.0859), (2.418, -0.0634), (2.42, 
    -0.0359), (2.422, 0.0216), (2.424, 0.0542), (2.426, 0.0667), (2.428, 
    0.0767), (2.43, 0.0693), (2.432, 0.0568), (2.434, 0.0318), (2.436, 0.0619), 
    (2.438, 0.082), (2.44, 0.087), (2.442, 0.0895), (2.444, 0.0796), (2.446, 
    0.0646), (2.448, 0.0397), (2.45, 0.0373), (2.452, 0.0974), (2.454, 0.1349), 
    (2.456, 0.1525), (2.458, 0.1375), (2.46, 0.1126), (2.462, 0.0977), (2.464, 
    0.0603), (2.466, 0.0829), (2.468, 0.0929), (2.47, 0.123), (2.472, 0.1256), 
    (2.474, 0.1332), (2.476, 0.1157), (2.478, 0.0934), (2.48, 0.076), (2.482, 
    0.0461), (2.484, 0.0037), (2.486, -0.0237), (2.488, -0.0586), (2.49, 
    -0.0785), (2.492, -0.1233), (2.494, -0.1182), (2.496, -0.1156), (2.498, 
    -0.113), (2.5, -0.1054), (2.502, -0.1053), (2.504, -0.1077), (2.506, 
    -0.14), (2.508, -0.1449), (2.51, -0.1523), (2.512, -0.1472), (2.514, 
    -0.1296), (2.516, -0.0995), (2.518, -0.0818), (2.52, -0.0316), (2.522, 
    -0.0015), (2.524, -0.0089), (2.526, -0.0062), (2.528, -0.0186), (2.53, 
    -0.0535), (2.532, -0.0708), (2.534, -0.1131), (2.536, -0.1104), (2.538, 
    -0.0778), (2.54, -0.0377), (2.542, -0.025), (2.544, 0.0076), (2.546, 
    0.0327), (2.548, 0.093), (2.55, 0.1156), (2.552, 0.1358), (2.554, 0.1459), 
    (2.556, 0.1386), (2.558, 0.1262), (2.56, 0.1089), (2.562, 0.1217), (2.564, 
    0.1469), (2.566, 0.1745), (2.568, 0.1822), (2.57, 0.2223), (2.572, 0.2525), 
    (2.574, 0.2851), (2.576, 0.298), (2.578, 0.2881), (2.58, 0.2608), (2.582, 
    0.2485), (2.584, 0.2312), (2.586, 0.2088), (2.588, 0.194), (2.59, 0.1568), 
    (2.592, 0.132), (2.594, 0.1172), (2.596, 0.0999), (2.598, 0.0751), (2.6, 
    0.0653), (2.602, 0.0804), (2.604, 0.1208), (2.606, 0.136), (2.608, 0.1462), 
    (2.61, 0.1489), (2.612, 0.1416), (2.614, 0.1168), (2.616, 0.1094), (2.618, 
    0.0948), (2.62, 0.0775), (2.622, 0.0777), (2.624, 0.0654), (2.626, 0.0306), 
    (2.628, -0.0342), (2.63, -0.064), (2.632, -0.036), (2.634, -0.0309), (
    2.636, -0.0257), (2.638, -0.0379), (2.64, -0.0577), (2.642, -0.0875), (
    2.644, -0.0898), (2.646, -0.0819), (2.648, -0.0767), (2.65, -0.069), (
    2.652, -0.0538), (2.654, -0.0311), (2.656, -0.0258), (2.658, -0.0031), (
    2.66, 0.0173), (2.662, 0.025), (2.664, 0.0178), (2.666, 0.0005), (2.668, 
    -0.0318), (2.67, -0.0366), (2.672, -0.0489), (2.674, -0.0609), (2.676, 
    -0.0782), (2.678, -0.1129), (2.68, -0.1427), (2.682, -0.165), (2.684, 
    -0.2048), (2.686, -0.2545), (2.688, -0.2641), (2.69, -0.2463), (2.692, 
    -0.2411), (2.694, -0.2084), (2.696, -0.1856), (2.698, -0.1604), (2.7, 
    -0.1727), (2.702, -0.1822), (2.704, -0.1919), (2.706, -0.2017), (2.708, 
    -0.204), (2.71, -0.1887), (2.712, -0.1835), (2.714, -0.1733), (2.716, 
    -0.1203), (2.718, -0.1025), (2.72, -0.0873), (2.722, -0.0846), (2.724, 
    -0.0868), (2.726, -0.0916), (2.728, -0.0813), (2.73, -0.0708), (2.732, 
    -0.0556), (2.734, -0.0353), (2.736, -0.0126), (2.738, 0.0027), (2.74, 
    0.0229), (2.742, 0.0407), (2.744, 0.0687), (2.746, 0.0714), (2.748, 
    0.0792), (2.75, 0.0769), (2.752, 0.0697), (2.754, 0.0524), (2.756, 0.0327), 
    (2.758, -0.0193), (2.76, -0.0415), (2.762, -0.0363), (2.764, -0.041), (
    2.766, -0.0283), (2.768, -0.0055), (2.77, -0.0153), (2.772, -0.0372), (
    2.774, -0.0445), (2.776, -0.0692), (2.778, -0.0589), (2.78, -0.0437), (
    2.782, -0.0184), (2.784, -0.0007), (2.786, 0.0323), (2.788, 0.0626), (2.79, 
    0.0853), (2.792, 0.0981), (2.794, 0.1159), (2.796, 0.1386), (2.798, 
    0.1514), (2.8, 0.1894), (2.802, 0.2147), (2.804, 0.2149), (2.806, 0.2252), 
    (2.808, 0.218), (2.81, 0.2207), (2.812, 0.2135), (2.814, 0.184), (2.816, 
    0.1743), (2.818, 0.1621), (2.82, 0.1448), (2.822, 0.1326), (2.824, 0.1304), 
    (2.826, 0.1081), (2.828, 0.0587), (2.83, 0.0339), (2.832, 0.0167), (2.834, 
    -0.0105), (2.836, -0.0278), (2.838, -0.0425), (2.84, -0.0722), (2.842, 
    -0.1117), (2.844, -0.1214), (2.846, -0.1261), (2.848, -0.1184), (2.85, 
    -0.1156), (2.852, -0.1128), (2.854, -0.1026), (2.856, -0.1095), (2.858, 
    -0.1168), (2.86, -0.129), (2.862, -0.1387), (2.864, -0.1285), (2.866, 
    -0.1257), (2.868, -0.1254), (2.87, -0.0999), (2.872, -0.1121), (2.874, 
    -0.1243), (2.876, -0.1366), (2.878, -0.1538), (2.88, -0.1585), (2.882, 
    -0.1683), (2.884, -0.1528), (2.886, -0.15), (2.888, -0.1472), (2.89, 
    -0.1394), (2.892, -0.1342), (2.894, -0.1339), (2.896, -0.1362), (2.898, 
    -0.1556), (2.9, -0.1554), (2.902, -0.1501), (2.904, -0.1223), (2.906, 
    -0.1046), (2.908, -0.0793), (2.91, -0.0666), (2.912, -0.071), (2.914, 
    -0.0658), (2.916, -0.048), (2.918, -0.0327), (2.92, -0.0175), (2.922, 
    -0.0122), (2.924, 0.0055), (2.926, 0.0261), (2.928, 0.0363), (2.93, 
    0.0466), (2.932, 0.0393), (2.934, 0.0371), (2.936, 0.0224), (2.938, 
    0.0201), (2.94, -0.0068), (2.942, 0.0059), (2.944, 0.0237), (2.946, 
    0.0414), (2.948, 0.0517), (2.95, 0.0594), (2.952, 0.0847), (2.954, 0.0702), 
    (2.956, 0.0555), (2.958, 0.0407), (2.96, 0.041), (2.962, 0.0637), (2.964, 
    0.0765), (2.966, 0.0892), (2.968, 0.0873), (2.97, 0.095), (2.972, 0.0878), 
    (2.974, 0.0705), (2.976, 0.0483), (2.978, 0.021), (2.98, 0.0163), (2.982, 
    -0.0132), (2.984, -0.0205), (2.986, -0.0127), (2.988, -0.0125), (2.99, 
    -0.0122), (2.992, -0.002), (2.994, 0.0008), (2.996, 0.0038), (2.998, 
    0.0115), (3.0, 0.0168), (3.002, 0.0195), (3.004, 0.0047), (3.006, -0.0175), 
    (3.008, -0.0348), (3.01, -0.0493), (3.012, -0.064), (3.014, -0.0613), (
    3.016, -0.0585), (3.018, -0.0833), (3.02, -0.0856), (3.022, -0.0953), (
    3.024, -0.1348), (3.026, -0.1446), (3.028, -0.1519), (3.03, -0.1641), (
    3.032, -0.1739), (3.034, -0.1736), (3.036, -0.1709), (3.038, -0.1629), (
    3.04, -0.1652), (3.042, -0.1425), (3.044, -0.1298), (3.046, -0.097), (
    3.048, -0.0843), (3.05, -0.0716), (3.052, -0.0611), (3.054, -0.0509), (
    3.056, -0.0607), (3.058, -0.0505), (3.06, -0.0577), (3.062, -0.0675), (
    3.064, -0.0723), (3.066, -0.0818), (3.068, -0.0716), (3.07, -0.0589), (
    3.072, -0.0512), (3.074, -0.0585), (3.076, -0.0683), (3.078, -0.1055), (
    3.08, -0.1451), (3.082, -0.1599), (3.084, -0.1472), (3.086, -0.1519), (
    3.088, -0.1392), (3.09, -0.1065), (3.092, -0.0763), (3.094, -0.0409), (
    3.096, -0.0382), (3.098, -0.028), (3.1, -0.0303), (3.102, -0.0101), (3.104, 
    -0.0049), (3.106, 0.0153), (3.108, 0.0307), (3.11, 0.0259), (3.112, 
    0.0236), (3.114, 0.0113), (3.116, 0.0165), (3.118, 0.0117), (3.12, 
    -0.0056), (3.122, -0.0727), (3.124, -0.1), (3.126, -0.0873), (3.128, 
    -0.0746), (3.13, -0.0594), (3.132, -0.0517), (3.134, -0.0415), (3.136, 
    -0.0187), (3.138, -0.001), (3.14, 0.0117), (3.142, 0.0369), (3.144, 
    0.0546), (3.146, 0.0748), (3.148, 0.0675), (3.15, 0.0853), (3.152, 0.093), 
    (3.154, 0.0932), (3.156, 0.0859), (3.158, 0.081), (3.16, 0.0862), (3.162, 
    0.0939), (3.164, 0.1242), (3.166, 0.1344), (3.168, 0.1571), (3.17, 0.1522), 
    (3.172, 0.1649), (3.174, 0.1726), (3.176, 0.1678), (3.178, 0.1531), (3.18, 
    0.1283), (3.182, 0.1009), (3.184, 0.0436), (3.186, 0.0163), (3.188, 
    0.0164), (3.19, 0.0066), (3.192, 0.0044), (3.194, -0.0129), (3.196, 
    -0.0103), (3.198, -0.0351), (3.2, -0.035), (3.202, -0.0473), (3.204, 
    -0.0647), (3.206, -0.0694), (3.208, -0.0767), (3.21, -0.0816), (3.212, 
    -0.0914), (3.214, -0.1013), (3.216, -0.1212), (3.218, -0.116), (3.22, 
    -0.1182), (3.222, -0.1256), (3.224, -0.1255), (3.226, -0.1253), (3.228, 
    -0.1277), (3.23, -0.1276), (3.232, -0.13), (3.234, -0.1272), (3.236, 
    -0.1246), (3.238, -0.1244), (3.24, -0.1293), (3.242, -0.1167), (3.244, 
    -0.1166), (3.246, -0.1165), (3.248, -0.0913), (3.25, -0.0737), (3.252, 
    -0.066), (3.254, -0.0434), (3.256, -0.0408), (3.258, -0.0432), (3.26, 
    -0.0481), (3.262, -0.0079), (3.264, 0.0172), (3.266, 0.0648), (3.268, 
    0.1074), (3.27, 0.12), (3.272, 0.1151), (3.274, 0.1077), (3.276, 0.0754), (
    3.278, 0.073), (3.28, 0.0906), (3.282, 0.1081), (3.284, 0.1007), (3.286, 
    0.0958), (3.288, 0.0859), (3.29, 0.0761), (3.292, 0.0687), (3.294, 0.0613), 
    (3.296, 0.0589), (3.298, 0.0864), (3.3, 0.1215), (3.302, 0.1441), (3.304, 
    0.1192), (3.306, 0.1168), (3.308, 0.1194), (3.31, 0.112), (3.312, 0.1221), 
    (3.314, 0.1246), (3.316, 0.1422), (3.318, 0.1123), (3.32, 0.0824), (3.322, 
    0.065), (3.324, 0.04), (3.326, 0.0426), (3.328, 0.0302), (3.33, 0.0252), (
    3.332, 0.0129), (3.334, 0.0004), (3.336, -0.007), (3.338, -0.022), (3.34, 
    -0.0344), (3.342, -0.0468), (3.344, -0.0518), (3.346, -0.0767), (3.348, 
    -0.0716), (3.35, -0.0691), (3.352, -0.0666), (3.354, -0.0765), (3.356, 
    -0.0615), (3.358, -0.0539), (3.36, -0.0238), (3.362, -0.0063), (3.364, 
    0.0087), (3.366, 0.0313), (3.368, 0.0388), (3.37, 0.0588), (3.372, 0.0688), 
    (3.374, 0.0914), (3.376, 0.1014), (3.378, 0.1064), (3.38, 0.104), (3.382, 
    0.0915), (3.384, 0.1015), (3.386, 0.1015), (3.388, 0.0916), (3.39, 0.0941), 
    (3.392, 0.0916), (3.394, 0.0891), (3.396, 0.0866), (3.398, 0.0842), (3.4, 
    0.0717), (3.402, 0.0817), (3.404, 0.0692), (3.406, 0.0592), (3.408, 
    0.0492), (3.41, 0.0342), (3.412, 0.0292), (3.414, 0.0242), (3.416, 0.0092), 
    (3.418, -0.0008), (3.42, -0.0033), (3.422, 0.0042), (3.424, -0.0008), (
    3.426, 0.0142), (3.428, 0.0316), (3.43, 0.0441), (3.432, 0.0391), (3.434, 
    0.0466), (3.436, 0.0491), (3.438, 0.0615), (3.44, 0.054), (3.442, 0.0515), 
    (3.444, 0.0465), (3.446, 0.0339), (3.448, 0.0114), (3.45, -0.0061), (3.452, 
    -0.0436), (3.454, -0.0712), (3.456, -0.0862), (3.458, -0.0763), (3.46, 
    -0.0663), (3.462, -0.0613), (3.464, -0.0389), (3.466, -0.0289), (3.468, 
    -0.019), (3.47, 0.0035), (3.472, 0.0134), (3.474, 0.0134), (3.476, 0.0233), 
    (3.478, 0.0333), (3.48, 0.0307), (3.482, 0.0307), (3.484, 0.0431), (3.486, 
    0.0305), (3.488, 0.028), (3.49, 0.0329), (3.492, 0.0428), (3.494, 0.0478), 
    (3.496, 0.0602), (3.498, 0.0501), (3.5, 0.0625), (3.502, 0.0649), (3.504, 
    0.0674), (3.506, 0.0623), (3.508, 0.0472), (3.51, 0.0472)), name='Amp-1', 
    smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-1'].steps['Earthquake Step'].setValues(initialInc=0.002, 
    maxNumInc=351000, minInc=1e-05, timePeriod=3.51)
mdb.models['Model-1'].Gravity(comp2=-9807.0, createStepName='Earthquake Step', 
    distributionType=UNIFORM, field='', name='Gravity Load')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), ), name='Set-bottom-building')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName=
    'Earthquake Step', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    localCsys=None, name='FS', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-bottom-building'], u1=0.0, u2=
    0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), ), name='Set-Moving')
mdb.models['Model-1'].AccelerationBC(a1=UNSET, a2=UNSET, a3=100000.0, 
    amplitude='Amp-1', ar1=UNSET, ar2=UNSET, ar3=UNSET, createStepName=
    'Earthquake Step', distributionType=UNIFORM, fieldName='', localCsys=None, 
    name='MS', region=mdb.models['Model-1'].rootAssembly.sets['Set-Moving'])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Rebar'].Set(edges=
    mdb.models['Model-1'].parts['Rebar'].edges.getSequenceFromMask(('[#1 ]', ), 
    ), name='Set-2')
mdb.models['Model-1'].parts['Rebar'].assignBeamSectionOrientation(method=
    N1_COSINES, n1=(0.0, 0.0, -1.0), region=
    mdb.models['Model-1'].parts['Rebar'].sets['Set-2'])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.suppressFeatures(('Concrete Beam-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'])
    , size=280.0)
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Concrete Beam-1', 
    'Concrete Beam-1-lin-1-2', 'Concrete Beam-1-lin-2-1', 
    'Concrete Beam-1-lin-2-2', 'Concrete Beam-1-lin-2-1-lin-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 'Concrete Beam-1-lin-1-2-1', 
    'Concrete Beam-1-lin-1-3', 'Concrete Beam-1-lin-1-4', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3'))
mdb.models['Model-1'].rootAssembly.resumeFeatures(('Partition cell-1', 
    'Partition cell-2', 'Partition cell-3', 'Partition cell-4'))
mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-5'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-3'])
    , size=75.0)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-4'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-2-5'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-3-3'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin--lin-1-4-3']))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1700 nodes on an embedded element do not lie in any host element. Check coordinates, exterior tolerance and absolute exterior tolerance parameters, and the host element set definition. The nodes have been identified in node set ErrNodeEmbeddedNode.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\DirectoryName-EQ\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].constraints['embeded rebars']
mdb.models['Model-1'].EmbeddedRegion(absoluteTolerance=0.0, embeddedRegion=
    mdb.models['Model-1'].rootAssembly.sets['Set-rebars'], fractionalTolerance=
    0.05, hostRegion=mdb.models['Model-1'].rootAssembly.sets['Set-Concrete'], 
    name='embeded rebars', toleranceMethod=BOTH, weightFactorTolerance=1e-06)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1700 nodes on an embedded element do not lie in any host element. Check coordinates, exterior tolerance and absolute exterior tolerance parameters, and the host element set definition. The nodes have been identified in node set ErrNodeEmbeddedNode.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\mofid\\Downloads\\DirectoryName-EQ\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].constraints['embeded rebars'].suppress()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Rebar'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Rebar'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(25.0, 25.0))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    19.5228462219238, -10.3014163970947), value=2800.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    30.0256462097168, 9.68085098266602), value=2800.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='ceiling', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['ceiling'].BaseSolidExtrude(depth=300.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='ceiling-1', 
    part=mdb.models['Model-1'].parts['ceiling'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(1375.0, 
    -25.0, 0.0), axisPoint=(-1375.0, 25.0, 300.0), instanceList=('ceiling-1', 
    ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ceiling-1', ), 
    vector=(3043.637565, 10850.066098, 2825.218992))
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, -1.0, 0.0), instanceList=('ceiling-1', ), number1=1, 
    number2=4, spacing1=2855.42, spacing2=351.768)
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ceiling-1-lin-1-4', 
    ), vector=(31.362435, -7371.530098, -25.218992))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ceiling-1-lin-1-3', 
    ), vector=(31.362435, -4923.298098, -25.218992))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ceiling-1-lin-1-2', 
    ), vector=(0.0, -2500.0, -300.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('ceiling-1-lin-1-2', 
    ), vector=(25.908791, 76.751476, 274.781008))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.0, 0.0), 
    point2=(15.0, 15.0))
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    7.90798950195312, -5.21276473999023), value=900.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    20.2642250061035, 6.5780143737793), value=900.0, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='foundation', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['foundation'].BaseSolidExtrude(depth=900.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='foundation-1', 
    part=mdb.models['Model-1'].parts['foundation'])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    166.836700439453, -523.723449707031), value=8400.0, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[2], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[3])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=8400)
mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['foundation'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=8400)
mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['foundation'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].setValues(
    depth=8400.0)
mdb.models['Model-1'].parts['foundation'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].setValues(
    depth=4200.0)
mdb.models['Model-1'].parts['foundation'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].setValues(
    depth=8400.0)
mdb.models['Model-1'].parts['foundation'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].HomogeneousSolidSection(material='C20/25', name=
    'Section-3', thickness=None)
mdb.models['Model-1'].parts['ceiling'].Set(cells=
    mdb.models['Model-1'].parts['ceiling'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), name='Set-1')
mdb.models['Model-1'].parts['ceiling'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['ceiling'].sets['Set-1'], sectionName=
    'Section-3', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['foundation'].regenerate()
mdb.models['Model-1'].HomogeneousSolidSection(material='C20/25', name=
    'Section-4', thickness=None)
mdb.models['Model-1'].parts['foundation'].Set(cells=
    mdb.models['Model-1'].parts['foundation'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['foundation'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['foundation'].sets['Set-1'], sectionName=
    'Section-4', thicknessAssignment=FROM_SECTION)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['foundation'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=840.0)
mdb.models['Model-1'].parts['foundation'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1000.0)
mdb.models['Model-1'].parts['foundation'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=500.0)
mdb.models['Model-1'].parts['foundation'].generateMesh()
mdb.models['Model-1'].parts['ceiling'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=280.0)
mdb.models['Model-1'].parts['ceiling'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=100.0)
mdb.models['Model-1'].parts['ceiling'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8132, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 72 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 703.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 136.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Sun Sep  1 10:02:25 2024', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8768, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 876.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 115.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 72 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 882.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 115.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.002, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 1, 'stepTime': 0.002, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.004, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 2, 'stepTime': 0.004, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.006, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 3, 'stepTime': 0.006, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0085, 'attempts': 1, 
    'timeIncrement': 0.0025, 'increment': 4, 'stepTime': 0.0085, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0085, 'attempts': ' 1U', 
    'timeIncrement': 0.003125, 'increment': 5, 'stepTime': 0.0085, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Earthquake Step'].setValues(maxNumInc=2, noStop=
    OFF, nohaf=OFF, timeIncrementationMethod=FIXED)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6196, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 876.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 115.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 72 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 882.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 115.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.002, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 1, 'stepTime': 0.002, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.004, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 2, 'stepTime': 0.004, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Earthquake Step'].setValues(maxNumInc=351000, 
    nohaf=OFF, timeIncrementationMethod=AUTOMATIC)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1048, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 876.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 115.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 72 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 882.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 115.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.002, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 1, 'stepTime': 0.002, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.004, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 2, 'stepTime': 0.004, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.006, 'attempts': 1, 
    'timeIncrement': 0.002, 'increment': 3, 'stepTime': 0.006, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0085, 'attempts': 1, 
    'timeIncrement': 0.0025, 'increment': 4, 'stepTime': 0.0085, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0085, 'attempts': ' 1U', 
    'timeIncrement': 0.003125, 'increment': 5, 'stepTime': 0.0085, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00928125, 'attempts': 2, 
    'timeIncrement': 0.00078125, 'increment': 5, 'stepTime': 0.00928125, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0102578125, 'attempts': 1, 
    'timeIncrement': 0.0009765625, 'increment': 6, 'stepTime': 0.0102578125, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].setValues(
    depth=2.0)
mdb.models['Model-1'].parts['foundation'].regenerate()
mdb.models['Model-1'].parts['foundation'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(8400.0, 
    0.0, 0.0), axisPoint=(-885.0, 15.0, 2.0), instanceList=('foundation-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('foundation-1', ), 
    vector=(885.0, -17.0, 7298.0))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].Part(name='soil', objectToCopy=
    mdb.models['Model-1'].parts['foundation'])
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=400.0)
mdb.models['Model-1'].parts['soil'].regenerate()
mdb.models['Model-1'].parts['soil'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='soil-1', part=
    mdb.models['Model-1'].parts['soil'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(-4200.0, 
    0.0, 0.0), axisPoint=(7515.0, -8385.0, 400.0), instanceList=('soil-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('soil-1', ), vector=
    (885.0, 8385.0, 6900.0))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=20.0)
mdb.models['Model-1'].parts['soil'].regenerate()
mdb.models['Model-1'].parts['soil'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('soil-1', ), vector=
    (0.0, 378.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=500.0)
mdb.models['Model-1'].parts['soil'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['soil'].regenerate()
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=50.0)
mdb.models['Model-1'].parts['soil'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('soil-1', ), vector=
    (-8400.0, 21.0, -7300.0))
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=500.0)
mdb.models['Model-1'].parts['soil'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('soil-1', ), vector=
    (8400.0, -501.0, 7300.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=5000.0)
mdb.models['Model-1'].parts['soil'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=500.0)
mdb.models['Model-1'].parts['soil'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=900.0)
mdb.models['Model-1'].parts['soil'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['soil'].features['Solid extrude-1'].setValues(
    depth=1500.0)
mdb.models['Model-1'].parts['soil'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('soil-1', ), vector=
    (0.0, 501.0, -7300.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=('soil-1', ), vector=
    (0.0, -1501.0, 7300.0))
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Beam-Bottom', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-2'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-1-2'].faces.getSequenceFromMask(
    mask=('[#200 ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Foundation', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['foundation-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.3, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=1000.0, slipRateDependency=OFF, 
    table=((0.8, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['IntProp-1'].CohesiveBehavior(
    repeatedContacts=ON)
mdb.models['Model-1'].interactionProperties['IntProp-1'].Damage(evolTable=((
    5.0, ), ), initTable=((200.0, 700.0, 1000.0), ), useEvolution=ON)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Earthquake Step', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Beam-Bottom'], name=
    'Int-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Foundation'], sliding=
    FINITE, thickness=ON)
mdb.models['Model-1'].Material(name='Soil', objectToCopy=
    mdb.models['Model-1'].materials['C20/25'])
mdb.models['Model-1'].materials['Soil'].density.setValues(table=((1.5e-09, ), 
    ))
mdb.models['Model-1'].materials['Soil'].elastic.setValues(table=((10000.0, 
    0.3), ))
mdb.models['Model-1'].materials['Soil'].MohrCoulombPlasticity(table=((35.0, 
    40.0), ))
mdb.models['Model-1'].materials['Soil'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((25.0, 0.0), ))
mdb.models['Model-1'].materials['Soil'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
del mdb.models['Model-1'].materials['Soil'].concreteDamagedPlasticity
mdb.models['Model-1'].materials['Soil'].mohrCoulombPlasticity.tensionCutOff.setValues(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['soil'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=200.0)
mdb.models['Model-1'].parts['soil'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=ENHANCED, 
    distortionControl=ON, lengthRatio=0.3, maxDegradation=0.8), ElemType(
    elemCode=C3D6, elemLibrary=STANDARD), ElemType(elemCode=C3D4, 
    elemLibrary=STANDARD, secondOrderAccuracy=OFF, distortionControl=DEFAULT)), 
    regions=(mdb.models['Model-1'].parts['soil'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['soil'].generateMesh()
mdb.models['Model-1'].parts['foundation'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=200.0)
mdb.models['Model-1'].parts['foundation'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=ENHANCED, 
    distortionControl=ON, lengthRatio=0.200000002980232, maxDegradation=0.4), 
    ElemType(elemCode=C3D6, elemLibrary=STANDARD), ElemType(elemCode=C3D4, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['foundation'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['Model-1'].parts['foundation'].generateMesh()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE-BASED COHESIVE BEHAVIOR CANNOT BE USED WITH FINITE-SLIDING, SURFACE-TO-SURFACE CONTACT PAIRS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-1-4', 
    'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-4', 'Rebar-1-lin-2-2-lin-1-4', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Concrete Beam-1-lin-1-2-lin-1-4'), number1=3, 
    number2=1, spacing1=300.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-1-3', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-3', 'Concrete Beam-1-lin-1-2-lin-1-3'), number1=3, 
    number2=1, spacing1=300.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-1-2-1', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-2'), number1=3, 
    number2=1, spacing1=300.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1', 
    'Rebar-1', 'Rebar-1-lin-1-2', 'Rebar-1-lin-2-1', 'Rebar-1-lin-2-2', 
    'Concrete Beam-1-lin-1-2'), number1=3, number2=1, spacing1=300.0, spacing2=
    2800.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Rebar-1-lin-2-1-lin-1-2-lin--lin-3-1', 
    'Rebar-1-lin-1-2-1-lin-1-4-lin-3-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-3-1'), vector=(1200.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=(
    'Rebar-1-lin-2-1-lin-1-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin--lin-2-1', 
    'Rebar-1-lin-1-2-1-lin-1-4-lin-2-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-2-1'), vector=(500.0, 0.0, 0.0))
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-2-1-lin-1-2-lin-1-4']
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Concrete Beam-1-lin-1-2-lin--lin-2-1-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-3-1-1'))
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-2-1-lin-1-2-lin--lin-3-1-1']
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-2-1-lin-1-2-lin--lin-2-1-1']
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-1-2-1-lin-1-3-lin-3-1']
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-1-2-lin-1-3', ), number1=2, number2=1, spacing1=1800.0
    , spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-1-2-lin-1-3', ), number1=2, number2=1, spacing1=780.0, 
    spacing2=2800.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-lin--lin-3-1-2']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-lin--lin-2-1-2']
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Rebar-1-lin-2-1-lin-1-2-lin--lin-2-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin--lin-3-1-2', 
    'Rebar-1-lin-1-2-1-lin-1-2-lin-3-1'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-lin-3-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-lin-2-1']
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-1-2-lin-1-2', ), number1=2, number2=1, spacing1=1800.0
    , spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=(
    'Concrete Beam-1-lin-1-2-lin-1-2', ), number1=2, number2=1, spacing1=780.0, 
    spacing2=2800.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-1-2', 
    ), number1=2, number2=1, spacing1=1800.0, spacing2=2800.0)
mdb.models['Model-1'].rootAssembly.LinearInstancePattern(direction1=(1.0, 0.0, 
    0.0), direction2=(0.0, 1.0, 0.0), instanceList=('Concrete Beam-1-lin-1-2', 
    ), number1=2, number2=1, spacing1=780.0, spacing2=2800.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-4-lin-3-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-4-lin-2-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-3-lin-2-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-3-lin-3-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-1-lin-3-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-1-lin-2-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-3-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-2-1-1']
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-2-1-lin-1-4-lin-3-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-1-4-lin-3-1', 
    'Rebar-1-lin-1-2-lin-1-4-lin-3-1', 'Rebar-1-lin-2-2-lin-1-4-lin-2-1', 
    'Rebar-1-lin-2-1-lin-1-4-lin-2-1'))
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-2-2-lin-1-4-lin-3-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-1-3-lin-3-1', 
    'Rebar-1-lin-1-2-lin-1-3-lin-3-1', 'Rebar-1-lin-2-2-lin-1-3-lin-2-1', 
    'Rebar-1-lin-2-1-lin-1-3-lin-2-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Rebar-1-lin-2-2-lin-1-3-lin-3-1', 'Rebar-1-lin-2-1-lin-1-3-lin-3-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-1-3-lin-2-1', 
    'Rebar-1-lin-1-2-lin-1-3-lin-2-1', 'Rebar-1-lin-1-2-1-lin-1-3-lin-2-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-1-2-2-lin-3-1', 
    'Rebar-1-lin-1-2-lin-1-2-lin-3-1', 'Rebar-1-lin-2-2-lin-1-2-lin-2-1', 
    'Rebar-1-lin-2-1-lin-1-2-1-lin-2-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-3-1', 
    'Rebar-1-lin-1-2-lin-3-1', 'Rebar-1-lin-2-2-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Rebar-1-lin-2-2-lin-1-2-lin-3-1', 'Rebar-1-lin-2-1-lin-1-2-1-lin-3-1'))
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-2-2-lin-3-1', 
    'Rebar-1-lin-2-1-lin-3-1'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE-BASED COHESIVE BEHAVIOR CANNOT BE USED WITH FINITE-SLIDING, SURFACE-TO-SURFACE CONTACT PAIRS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].interactionProperties['IntProp-1'].cohesiveBehavior
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.3, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=1000.0, slipRateDependency=OFF, 
    table=((0.8, ), ), temperatureDependency=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '*DAMAGE INITIATION and *DAMAGE EVOLUTION CANNOT BE SPECIFIED IF *COHESIVE BEHAVIOR HAS NOT BEEN USED FOR THE *SURFACE INTERACTION.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE-BASED COHESIVE BEHAVIOR CANNOT BE USED WITH FINITE-SLIDING, SURFACE-TO-SURFACE CONTACT PAIRS.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].interactionProperties['IntProp-1'].damage
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.3, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=1000.0, slipRateDependency=OFF, 
    table=((0.8, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE PARAMETER HOURGLASS = ENHANCED ON THE SECTION CONTROLS OPTION IS RELEVANT FOR THESE ELEMENTS: C3D8R, CAX4R, CGAX4R, CPEG4R, CPE4R, CPS4R, M3D4R, S4R, SC8R AND THEIR HYBRID, THERMAL AND PRESSURE COUNTERPARTS WHEREVER APPLICABLE. IT IS ALSO RELEVANT FOR ALL TYPES OF MODIFIED TRIANGULAR AND TETRAHEDRAL ELEMENTS. THIS WARNING CAN BE IGNORED IF THE FEATURE IS APPLIED TO THESE ELEMENT TYPES ONLY.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'DISTORTION CONTROL PARAMETER FOR THE *SECTION CONTROLS OPTION IN Abaqus/Standard IS VALID ONLY FOR C3D10HS ELEMENTS AND WILL BE IGNORED FOR ALL OTHER ELEMENT TYPES IN THE CURRENT ANALYSIS. IT WILL, HOWEVER, BE STORED FOR ANY SUBSEQUENT Abaqus/Explicit IMPORT ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_beam lateral surf-ASSEMBLY_column lateral surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FOR *TIE PAIR (ASSEMBLY_column bottom surf-ASSEMBLY_column top surf), ADJUSTED NODES WITH VERY SMALL ADJUSTMENTS WERE NOT PRINTED. SPECIFY *PREPRINT,MODEL=YES FOR COMPLETE PRINTOUT.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 1092 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName4\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 804, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 71 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 1155.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 185.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Sep  3 10:15:57 2024', 
    'jobName': 'Job-1'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Foundation-Bottom', 
    side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['foundation-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Soil-Top', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['soil-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Earthquake Step', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Soil-Top'], name='Int-2', 
    secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Foundation-Bottom'], 
    sliding=FINITE, thickness=ON)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['ceiling'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['ceiling'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['ceiling'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['foundation'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['foundation'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Partition cell-2', 
    'Concrete Beam-1-lin-1-2-1', 'Partition cell-3', 'Concrete Beam-1-lin-1-3', 
    'Partition cell-4', 'Concrete Beam-1-lin-1-4', 'Rebar-1-lin-1-2-2', 
    'Rebar-1-lin-1-3', 'Rebar-1-lin-1-4', 'Rebar-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-1-2-lin-1-3', 'Rebar-1-lin-1-2-lin-1-4', 
    'Rebar-1-lin-2-2-lin-1-2', 'Rebar-1-lin-2-2-lin-1-3', 
    'Rebar-1-lin-2-2-lin-1-4', 'Rebar-1-lin-2-1-lin-1-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-1-2-lin-1-3', 'Rebar-1-lin-2-1-lin-2-2-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-2-lin-1-3', 'Rebar-1-lin-2-1-lin-2-2-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4-1', 'Rebar-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-1-2-1-lin-1-2', 'Rebar-1-lin-1-2-1-lin-1-3', 
    'Rebar-1-lin-1-2-1-lin-1-4', 'Rebar-1-lin-2-1-1-lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-1-3', 'Rebar-1-lin-2-1-1-lin-1-4', 
    'Rebar-1-lin-2-2-1-lin-1-2', 'Rebar-1-lin-2-2-1-lin-1-3', 
    'Rebar-1-lin-2-2-1-lin-1-4', 'Rebar-1-lin-2-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin-1-3', 'Rebar-1-lin-2-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-2', 'Rebar-1-lin-2-1-1-lin-2-1-lin-1-3', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-4', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-3', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-4', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-2-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-3-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-1-4-2', 
    'Concrete Beam-1-lin-1-2-lin-1-2', 'Concrete Beam-1-lin-1-2-lin-1-3', 
    'Concrete Beam-1-lin-1-2-lin-1-4', 'Concrete Beam-1-lin-2-2-lin-1-2', 
    'Concrete Beam-1-lin-2-2-lin-1-3', 'Concrete Beam-1-lin-2-2-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-1', 
    'Concrete Beam-1-lin-2-1-lin-1-2', 'Concrete Beam-1-lin-2-1-lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-4', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-5', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-3-3', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-4-3', 'ceiling-1', 'ceiling-1-lin-1-2', 
    'ceiling-1-lin-1-3', 'Rebar-1-lin-1-4-lin-2-1', 
    'Rebar-1-lin-1-2-lin-1-4-lin-2-1', 'Rebar-1-lin-2-1-lin-1-2-lin--lin-2-1', 
    'Rebar-1-lin-2-1-lin-1-2-lin--lin-3-1', 
    'Rebar-1-lin-1-2-1-lin-1-4-lin-2-1', 'Rebar-1-lin-1-2-1-lin-1-4-lin-3-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-2-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-3-1', 'Rebar-1-lin-1-2-2-lin-2-1', 
    'Rebar-1-lin-1-2-lin-1-2-lin-2-1', 'Rebar-1-lin-1-2-1-lin-1-2-lin-2-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-2-1-1', 
    'Concrete Beam-1-lin-1-2-lin--lin-2-1-3', 
    'Concrete Beam-1-lin-1-2-lin--lin-2-1-2', 
    'Concrete Beam-1-lin-1-2-lin--lin-2-1-4'))
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-lin-2-1-1']
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2-lin-2-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('foundation-1', 'soil-1'))
del mdb.models['Model-1'].rootAssembly.features['Concrete Beam-1-lin-1-2']
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-2-1-lin-1-2']
del mdb.models['Model-1'].rootAssembly.features['Rebar-1-lin-1-2-1']
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Concrete Beam-1-lin-2-2', 
    'Rebar-1-lin-2-2-1', 'Rebar-1-lin-2-1-lin-2-2'))
mdb.models['Model-1'].rootAssembly.deleteFeatures((
    'Concrete Beam-1-lin-2-1-lin--lin-1-2', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2', 
    'Concrete Beam-1-lin-2-1-lin--lin-1-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-lin-1-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-1-2-1', 
    'Concrete Beam-1-lin-2-1-lin--lin-2-1', 
    'Rebar-1-lin-2-1-1-lin-2-1-li-lin-2-1', 
    'Rebar-1-lin-2-1-lin-2-1-lin--lin-2-1', 'ceiling-1-lin-1-4'))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Rebar-1-lin-2-1-2', 
    'Rebar-1-lin-1-2-lin-2-1'))
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=40)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=40)
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=40)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=40)
mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].setValues(
    depth=100.0)
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=100)
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Rebar'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].setValues(
    depth=2800.0)
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Rebar'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Rebar'].features['Wire-1'].sketch)
mdb.models['Model-1'].parts['Rebar'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=mdb.models['Model-1'].parts['Rebar'].features['Wire-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=300)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=300)
mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by mofid on 2024_10_15-05.45.48; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].steps['Earthquake Step']
# Save by mofid on 2024_10_15-07.26.38; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Part(name='Concrete-l', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'])
mdb.models['Model-1'].parts.changeKey(fromName='Concrete-l', toName=
    'Concrete-load')
mdb.models['Model-1'].parts['Concrete-load'].features['Solid extrude-1'].setValues(
    depth=300.0)
mdb.models['Model-1'].parts['Concrete-load'].regenerate()
mdb.models['Model-1'].parts['Concrete-load'].regenerate()
# Save by mofid on 2024_10_15-07.28.15; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Concrete-load-1', part=mdb.models['Model-1'].parts['Concrete-load'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Concrete-load-1', )
    , vector=(0.0, 2800.0, 0.0))
# Save by mofid on 2024_10_15-07.29.02; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Concrete-load-1', )
    , vector=(1550.0, 0.0, 0.0))
# Save by mofid on 2024_10_15-07.29.12; build 2023 2022_09_28-21.41.55 183150
# Save by mofid on 2024_10_15-07.29.18; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ExplicitDynamicsStep(improvedDtMethod=ON, name='Step-1', 
    previous='Initial')
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'SVAVG', 'PE', 'PEVAVG', 'PEEQ', 'PEEQVAVG', 'LE', 'U', 'V', 'A', 
    'RF', 'CSTRESS', 'DAMAGEC', 'DAMAGET', 'DAMAGESHR', 'EDMICRTMAX', 
    'MMIXDMI', 'EVF'))
mdb.models['Model-1'].materials['C20/25'].MohrCoulombPlasticity(table=((31.0, 
    15.0), ))
mdb.models['Model-1'].materials['C20/25'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((1.0, 0.0), ))
mdb.models['Model-1'].materials['C20/25'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['Model-1'].materials['Steel'].plastic.setValues(scaleStress=None)
mdb.models['Model-1'].materials['Steel'].MohrCoulombPlasticity(table=((31.0, 
    15.0), ))
mdb.models['Model-1'].materials['Steel'].mohrCoulombPlasticity.MohrCoulombHardening(
    table=((1.0, 0.0), ))
mdb.models['Model-1'].materials['Steel'].mohrCoulombPlasticity.TensionCutOff(
    dependencies=0, table=((0.0, 0.0), ), temperatureDependency=OFF)
mdb.models['Model-1'].HomogeneousSolidSection(material='Steel', name=
    'Section-load', thickness=None)
mdb.models['Model-1'].parts['Concrete-load'].Set(cells=
    mdb.models['Model-1'].parts['Concrete-load'].cells.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-load')
mdb.models['Model-1'].parts['Concrete-load'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Concrete-load'].sets['Set-load'], sectionName=
    'Section-load', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.3, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=1000.0, slipRateDependency=OFF, 
    table=((0.4329, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].normalBehavior.setValues(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Under-Load', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-load-1'].faces.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Top-Beam', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
# Save by mofid on 2024_10_15-07.40.34; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].SurfaceToSurfaceContactExp(clearanceRegion=None, 
    createStepName='Initial', datumAxis=None, initialClearance=OMIT, 
    interactionProperty='IntProp-1', main=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Under-Load'], 
    mechanicalConstraint=KINEMATIC, name='Int-1', secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Top-Beam'], sliding=
    FINITE)
mdb.models['Model-1'].Pressure(amplitude='Amp-1', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=777777.0, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-Under-Load'])
mdb.models['Model-1'].TabularAmplitude(data=((0.0, 0.0), (1.0, 1.0)), name=
    'Amp-2', smooth=SOLVER_DEFAULT, timeSpan=STEP)
mdb.models['Model-1'].loads['Load-1'].setValues(amplitude='Amp-2')
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-8')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-8'])
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ), name='Set-9')
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-9'])
mdb.models['Model-1'].rootAssembly.makeDependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1']))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1']))
mdb.models['Model-1'].rootAssembly.makeDependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1']))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete-load-1'], ))
mdb.models['Model-1'].rootAssembly.makeDependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Concrete-load-1'], ))
mdb.models['Model-1'].parts['Concrete Beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=280.0)
mdb.models['Model-1'].parts['Concrete Beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=50.0)
mdb.models['Model-1'].parts['Concrete Beam'].generateMesh()
mdb.models['Model-1'].parts['Concrete-load'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=30.0)
mdb.models['Model-1'].parts['Concrete-load'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.makeDependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1']))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1']))
mdb.models['Model-1'].rootAssembly.makeDependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-1-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-2'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1']))
mdb.models['Model-1'].parts['Rebar'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=280.0)
mdb.models['Model-1'].parts['Rebar'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=50.0)
mdb.models['Model-1'].parts['Rebar'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by mofid on 2024_10_15-07.48.16; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.saveAs(pathName='C:/Users/mofid/Downloads/pressure_concrete.cae')
del mdb.jobs['Job-1']
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-concrete-rebar', 
    nodalOutputPrecision=SINGLE, numCpus=1, numDomains=1, 
    numThreadsPerMpiProcess=1, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-concrete-rebar'].submit(consistencyChecking=OFF, datacheckJob=
    True)
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MATERIAL OPTIONS *CAP PLASTICITY, *CAST IRON PLASTICITY, *CLAY PLASTICITY, *CONCRETE, *CONCRETE DAMAGED PLASTICITY, *DRUCKER PRAGER, *FOAM, *CRUSHABLE FOAM, *MOHR COULOMB, *JOINTED MATERIAL, *PLASTIC AND *SOFT ROCK PLASTICITY ARE MUTUALLY EXCLUSIVE', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MATERIAL OPTIONS *CAP PLASTICITY, *CAST IRON PLASTICITY, *CLAY PLASTICITY, *CONCRETE, *CONCRETE DAMAGED PLASTICITY, *DRUCKER PRAGER, *FOAM, *CRUSHABLE FOAM, *MOHR COULOMB, *JOINTED MATERIAL, *PLASTIC AND *SOFT ROCK PLASTICITY ARE MUTUALLY EXCLUSIVE', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MAIN SURFACE ASSEMBLY_column lateral surf DOES NOT EXIST.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACE ASSEMBLY_column bottom surf DOES NOT EXIST.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE ASSEMBLY_column lateral surf NOT FOUND', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-concrete-rebar.odb', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-concrete-rebar.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-concrete-rebar.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
del mdb.models['Model-1'].materials['C20/25'].mohrCoulombPlasticity
del mdb.models['Model-1'].materials['Steel'].mohrCoulombPlasticity
mdb.models['Model-1'].materials['Steel'].plastic.setValues(scaleStress=None)
mdb.jobs['Job-concrete-rebar'].submit(consistencyChecking=OFF, datacheckJob=
    True)
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MAIN SURFACE ASSEMBLY_column lateral surf DOES NOT EXIST.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACE ASSEMBLY_column bottom surf DOES NOT EXIST.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE ASSEMBLY_column lateral surf NOT FOUND', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-concrete-rebar.odb', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-concrete-rebar.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-concrete-rebar.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
del mdb.models['Model-1'].rootAssembly.surfaces['column lateral surf']
del mdb.models['Model-1'].rootAssembly.surfaces['column bottom surf']
mdb.jobs['Job-concrete-rebar'].submit(consistencyChecking=OFF, datacheckJob=
    True)
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE MAIN SURFACE ASSEMBLY_COLUMNLATERALSURF DOES NOT EXIST.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SECONDARY SURFACE ASSEMBLY_COLUMNBOTTOMSURF DOES NOT EXIST.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE ASSEMBLY_COLUMNLATERALSURF NOT FOUND', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-concrete-rebar.odb', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-concrete-rebar.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-concrete-rebar.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
mdb.models['Model-1'].constraints['column-beam'].suppress()
mdb.models['Model-1'].constraints['column-column'].suppress()
mdb.models['Model-1'].constraints['column-beam'].resume()
mdb.models['Model-1'].constraints['column-column'].resume()
mdb.models['Model-1'].Tie(adjust=ON, main=
    mdb.models['Model-1'].rootAssembly.surfaces['column top surf'], name=
    'Constraint-4', positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Beam-Bottom'], thickness=
    ON, tieRotations=ON)
mdb.models['Model-1'].constraints['column-beam'].suppress()
mdb.models['Model-1'].constraints['column-column'].suppress()
mdb.models['Model-1'].constraints['Constraint-4'].suppress()
mdb.models['Model-1'].Tie(adjust=ON, main=
    mdb.models['Model-1'].rootAssembly.surfaces['column top surf'], name=
    'Constraint-5', positionToleranceMethod=COMPUTED, secondary=
    mdb.models['Model-1'].rootAssembly.surfaces['beam lateral surf'], 
    thickness=ON, tieRotations=ON)
# Save by mofid on 2024_10_15-07.55.52; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-concrete-rebar'].submit(consistencyChecking=OFF, datacheckJob=
    True)
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 13940, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 63 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4224, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 3.34250626110588e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 11.0})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(JOB_COMPLETED, {
    'time': 'Tue Oct 15 07:57:16 2024', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar'].submit(consistencyChecking=OFF)
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10980, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 63 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6308, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 3.34250626110588e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 740. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.00545970723032951, 
    'stableTimeIncrement': 8.43255065774429e-08, 
    'internalEnergy': 90997792768.0, 'stepTime': 0.00545970723032951, 
    'totalEnergy': 26006446.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 40514256896.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 17754, 'distortionContrEnergy': 0.0, 
    'externalWork': 210271092736.0, 'kineticEnergy': 119234174976.0, 
    'wallTime': 128.0})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.00625541852787137, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 2246989053952.0, 'stepTime': 0.00625541852787137, 
    'totalEnergy': 984711626752.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 1937012555776.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 30959, 'distortionContrEnergy': 0.0, 
    'externalWork': 3348475150336.0, 'kineticEnergy': 2040280252416.0, 
    'wallTime': 215.0})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-concrete-rebar'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=5555.0)
# Save by mofid on 2024_10_15-08.05.47; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-concrete-rebar'].submit(consistencyChecking=OFF)
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 12052, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 63 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'The nodes in node set WarnNodeCnsIntersectKinC are part of a kinematic contact surface definition as well as participate in a kinematic constraint (or distributing coupling). Nodes that participate in a kinematic constraint definition should not be used in a kinematic contact surface definition. If a degree-of-freedom participates in both types of constraints, the kinematic contact constraint will most often override the kinematic constraint. Abaqus/Explicit will not prevent the user from defining these conditions, but the resul', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1604, 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 3.34250626110588e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.0500033460557461, 
    'stableTimeIncrement': 4.25258212999324e-06, 'internalEnergy': 1648987.625, 
    'stepTime': 0.0500033460557461, 'totalEnergy': -40586.32421875, 
    'jobName': 'Job-concrete-rebar', 'artificialEnergy': 43.2523384094238, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 11759, 
    'distortionContrEnergy': 0.0, 'externalWork': 922117996544.0, 
    'kineticEnergy': 922116292608.0, 'wallTime': 85.0})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 24620. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.0972483083605766, 
    'stableTimeIncrement': 1.05678941508813e-06, 
    'internalEnergy': 1459740800.0, 'stepTime': 0.0972483083605766, 
    'totalEnergy': -3089498.75, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 89897016.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 28482, 'distortionContrEnergy': 0.0, 
    'externalWork': 13865336176640.0, 'kineticEnergy': 13863873413120.0, 
    'wallTime': 206.0})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.100000821053982, 
    'stableTimeIncrement': 9.81268726718554e-07, 
    'internalEnergy': 1559871872.0, 'stepTime': 0.100000821053982, 
    'totalEnergy': -4789586.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 95881384.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 31171, 'distortionContrEnergy': 0.0, 
    'externalWork': 12659085803520.0, 'kineticEnergy': 12657521328128.0, 
    'wallTime': 223.0})
mdb.jobs['Job-concrete-rebar']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'Job-concrete-rebar'})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.113312058150768, 
    'stableTimeIncrement': 7.09499147433235e-07, 
    'internalEnergy': 1731032064.0, 'stepTime': 0.113312058150768, 
    'totalEnergy': -43750568.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 98006504.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 47014, 'distortionContrEnergy': 0.0, 
    'externalWork': 12973986807808.0, 'kineticEnergy': 12972211568640.0, 
    'wallTime': 344.0})
mdb.jobs['Job-concrete-rebar']._Message(STATUS, {
    'totalTime': 0.121267780661583, 
    'stableTimeIncrement': 6.12830206137005e-07, 
    'internalEnergy': 1817638912.0, 'stepTime': 0.121267780661583, 
    'totalEnergy': -91059584.0, 'jobName': 'Job-concrete-rebar', 
    'artificialEnergy': 109129992.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 58522, 'distortionContrEnergy': 0.0, 
    'externalWork': 13224077426688.0, 'kineticEnergy': 13222167969792.0, 
    'wallTime': 468.0})
del mdb.jobs['Job-concrete-rebar']
mdb.models['Model-1'].sections['Section-load'].setValues(material='C20/25', 
    thickness=None)
mdb.models['Model-1'].parts['Concrete-load'].features['Solid extrude-1'].setValues(
    depth=10.0)
mdb.models['Model-1'].parts['Concrete-load'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(150.0, 
    0.0, 0.0), axisPoint=(1550.0, 2800.0, 10.0), instanceList=(
    'Concrete-load-1', ))
mdb.models['Model-1'].constraints['Constraint-5'].suppress()
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=55555.0)
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Under-Load', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-load-1'].faces.getSequenceFromMask(
    ('[#10 ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-Top-Load', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete-load-1'].faces.getSequenceFromMask(
    ('[#20 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude='Amp-2', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=55555.0, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-Top-Load'])
# Save by mofid on 2024_10_15-08.21.02; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-12', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-12'].submit(consistencyChecking=OFF)
mdb.jobs['Job-12']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE DEFINITION ASSEMBLY_SURF-TOP-LOAD NOT FOUND.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SURFACE ASSEMBLY_SURF-TOP-LOAD HAS NOT BEEN LOCATED', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_SURF-UNDER-LOAD BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE HAS NOT BEEN DEFINED OR THIS SURFACE IS DEFINED ON THE COLLAPSED FACES', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-12.odb', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-12.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-12.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
# Save by mofid on 2024_10_15-08.22.26; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-12'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-12']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'SURFACE DEFINITION ASSEMBLY_SURF-TOP-LOAD NOT FOUND.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE SURFACE ASSEMBLY_SURF-TOP-LOAD HAS NOT BEEN LOCATED', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_SURF-UNDER-LOAD BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE HAS NOT BEEN DEFINED OR THIS SURFACE IS DEFINED ON THE COLLAPSED FACES', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-12.odb', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-12.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-12.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
# Save by mofid on 2024_10_15-08.23.57; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Concrete-load'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-12'].submit(consistencyChecking=OFF)
mdb.jobs['Job-12']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7504, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 62 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 416, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-12', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-12']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The secondary surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the main surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the main surface becomes a pure secondary surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment   189:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 2340. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-TOP-BEAM of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 2700. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.00341230584308505, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 19481522864128.0, 'stepTime': 0.00341230584308505, 
    'totalEnergy': 1.35772412208742e+15, 'jobName': 'Job-12', 
    'artificialEnergy': 17803557994496.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5013, 'distortionContrEnergy': 0.0, 
    'externalWork': 31195976957952.0, 'kineticEnergy': 1.68783946920755e+15, 
    'wallTime': 38.0})
mdb.jobs['Job-12']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-12'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=555.0)
# Save by mofid on 2024_10_15-08.25.45; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-12'].submit(consistencyChecking=OFF)
mdb.jobs['Job-12']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15152, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 62 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3236, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-12', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-12']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The secondary surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the main surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the main surface becomes a pure secondary surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment  4297:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.028201412409544, 
    'stableTimeIncrement': 4.73094132757979e-07, 'internalEnergy': 745506304.0, 
    'stepTime': 0.028201412409544, 'totalEnergy': 33080.67578125, 
    'jobName': 'Job-12', 'artificialEnergy': 134821424.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 17791, 
    'distortionContrEnergy': 0.0, 'externalWork': 5093578752.0, 
    'kineticEnergy': 4276597760.0, 'wallTime': 121.0})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.0301190577447414, 
    'stableTimeIncrement': 7.19702626383878e-08, 
    'internalEnergy': 1783273472.0, 'stepTime': 0.0301190577447414, 
    'totalEnergy': 73975.0859375, 'jobName': 'Job-12', 
    'artificialEnergy': 407501728.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 30912, 'distortionContrEnergy': 0.0, 
    'externalWork': 15874716672.0, 'kineticEnergy': 13691243520.0, 
    'wallTime': 242.0})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 34980. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.0308515410870314, 
    'stableTimeIncrement': 5.55099539667481e-08, 
    'internalEnergy': 2475954176.0, 'stepTime': 0.0308515410870314, 
    'totalEnergy': 77673.328125, 'jobName': 'Job-12', 
    'artificialEnergy': 547038912.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 41940, 'distortionContrEnergy': 0.0, 
    'externalWork': 23707750400.0, 'kineticEnergy': 20655413248.0, 
    'wallTime': 366.0})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.0312891826033592, 
    'stableTimeIncrement': 4.09938039069857e-08, 
    'internalEnergy': 3001088512.0, 'stepTime': 0.0312891826033592, 
    'totalEnergy': 93315.7265625, 'jobName': 'Job-12', 
    'artificialEnergy': 642532096.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 51010, 'distortionContrEnergy': 0.0, 
    'externalWork': 30270355456.0, 'kineticEnergy': 26645829632.0, 
    'wallTime': 487.0})
mdb.jobs['Job-12']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-TOP-BEAM of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 57100. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-12'})
mdb.jobs['Job-12']._Message(STATUS, {'totalTime': 0.0315559171140194, 
    'stableTimeIncrement': 3.6777070278049e-08, 'internalEnergy': 3367740672.0, 
    'stepTime': 0.0315559171140194, 'totalEnergy': 102935.890625, 
    'jobName': 'Job-12', 'artificialEnergy': 707402176.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 57679, 
    'distortionContrEnergy': 0.0, 'externalWork': 35433574400.0, 
    'kineticEnergy': 31567202304.0, 'wallTime': 613.0})
del mdb.jobs['Job-12']
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=55555.0)
mdb.Job(activateLoadBalancing=False, atTime=None, contactPrint=OFF, 
    description='', echoPrint=OFF, explicitPrecision=SINGLE, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numDomains=1, numThreadsPerMpiProcess=1, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3916, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 62 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 11804, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The secondary surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the main surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the main surface becomes a pure secondary surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment   189:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 2340. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-TOP-BEAM of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 2700. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00341230584308505, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 19481522864128.0, 'stepTime': 0.00341230584308505, 
    'totalEnergy': 1.35772412208742e+15, 'jobName': 'Job-1', 
    'artificialEnergy': 17803557994496.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5013, 'distortionContrEnergy': 0.0, 
    'externalWork': 31195976957952.0, 'kineticEnergy': 1.68783946920755e+15, 
    'wallTime': 87.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=10.0)
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=5555555.0)
# Save by mofid on 2024_10_15-08.40.59; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 5236, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 62 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3460, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The secondary surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the main surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the main surface becomes a pure secondary surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment     7:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 200. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-TOP-BEAM of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 240. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.000341072474839166, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 863351930880.0, 'stepTime': 0.000341072474839166, 
    'totalEnergy': 16306895872.0, 'jobName': 'Job-1', 
    'artificialEnergy': 764153757696.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 573, 'distortionContrEnergy': 0.0, 
    'externalWork': 28796684075008.0, 'kineticEnergy': 27679644450816.0, 
    'wallTime': 11.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].steps['Step-1'].setValues(improvedDtMethod=ON, 
    timePeriod=50.0)
# Save by mofid on 2024_10_15-08.42.03; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6356, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 62 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 2728, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The secondary surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the main surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the main surface becomes a pure secondary surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment     7:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 200. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-TOP-BEAM of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 240. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.000341072474839166, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 863351930880.0, 'stepTime': 0.000341072474839166, 
    'totalEnergy': 16306895872.0, 'jobName': 'Job-1', 
    'artificialEnergy': 764153757696.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 573, 'distortionContrEnergy': 0.0, 
    'externalWork': 28796684075008.0, 'kineticEnergy': 27679644450816.0, 
    'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=55555.0)
# Save by mofid on 2024_10_15-08.44.53; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10900, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 62 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 7156, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The secondary surface nodes in node set WarnNodeMassRatio3fix-Step1 have much larger masses than the nodes on the main surface. Significant contact noise may result. Suggested workarounds include setting the WEIGHT parameter so that what was the main surface becomes a pure secondary surface in the contact pair, using mass-scaling to adjust the ratio of nodal masses, or using the penalty contact algorithm. See the status file for further details.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment   189:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-UNDER-LOAD of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 2340. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'Main surface ASSEMBLY_SURF-TOP-BEAM of contact pair # 1 contains facets with out-of-plane warping of at least 20.000 degrees in increment 2700. Large warping that develops during an analysis often corresponds to severe distortion of the underlying elements. It may be appropriate to rerun the analysis with a refined mesh.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00341230584308505, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 19481522864128.0, 'stepTime': 0.00341230584308505, 
    'totalEnergy': 1.35772412208742e+15, 'jobName': 'Job-1', 
    'artificialEnergy': 17803557994496.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5013, 'distortionContrEnergy': 0.0, 
    'externalWork': 31195976957952.0, 'kineticEnergy': 1.68783946920755e+15, 
    'wallTime': 136.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=40)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=40)
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=40)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=40)
mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].Part(name='Concrete Beam-2', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'])
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].dimensions[0].setValues(value=300)
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=300)
mdb.models['Model-1'].parts['Concrete Beam'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Concrete Beam'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Concrete Beam-2'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['Concrete Beam-2'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Concrete Beam-2'].features['Solid extrude-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=9807.0)
# Save by mofid on 2024_10_15-09.12.03; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "Job-1.inp", line 1129: Unknown assembly node set SET-8', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "Job-1.inp", line 1132: Unknown assembly node set SET-9', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY_SET-8 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY_SET-9 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_SURF-TOP-BEAM BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE HAS NOT BEEN DEFINED OR THIS SURFACE IS DEFINED ON THE COLLAPSED FACES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_SET-8 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_SET-9 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "Job-1.inp", line 1129: Unknown assembly node set SET-8', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "Job-1.inp", line 1132: Unknown assembly node set SET-9', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY_SET-8 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'A BOUNDARY CONDITION HAS BEEN SPECIFIED ON NODE SET ASSEMBLY_SET-9 BUT THIS NODE SET IS NOT ACTIVE IN THE MODEL', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_SURF-TOP-BEAM BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE HAS NOT BEEN DEFINED OR THIS SURFACE IS DEFINED ON THE COLLAPSED FACES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_SET-8 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'NODE SET ASSEMBLY_SET-9 HAS NOT BEEN DEFINED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'CONTACT PAIR REFERENCES SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE ASSEMBLY_SURF-TOP-BEAM BUT THIS SURFACE/NODE-BASED SURFACE/ANALYTICAL RIGID SURFACE HAS NOT BEEN DEFINED OR THIS SURFACE IS DEFINED ON THE COLLAPSED FACES', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].interactions['Int-1'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10300, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 46 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 16264, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment  2532:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.00832325778901577, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 64656907436032.0, 'stepTime': 0.00832325778901577, 
    'totalEnergy': 22042424377344.0, 'jobName': 'Job-1', 
    'artificialEnergy': 58869464170496.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4601, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.3386978477015e+15, 'kineticEnergy': 4.282082394112e+15, 
    'wallTime': 7.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=98.0)
# Save by mofid on 2024_10_15-09.19.18; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST EVF IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST MMIXDMI IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST SVAVG IS NOT AVAILABLE FOR ELEMENT TYPE B31', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 6152, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 46 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 15180, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 2.83202780337888e-06, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': ' Step  1, Increment 53559:    1 material point(s) failed to converge in the material constitutive routines.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed in the elements in element set WarnElemDeformRateExceedsRatio-Step1 exceed the warning ratio.  Refer to the status file for further details. This message is printed during the first applicable increment, but will not be printed during subsequent increments for the remainder of the step.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': EXPLICIT_PHASE, 
    'message': 'The ratio of deformation speed to wave speed exceeds 1.0000 in at least one element. This usually indicates an error with the model definition. Additional diagnostic information may be found in the message file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.152641221880913, 
    'stableTimeIncrement': 9.9999998245167e-15, 
    'internalEnergy': 1.10928892004902e+23, 'stepTime': 0.152641221880913, 
    'totalEnergy': -1.47822337368125e+22, 'jobName': 'Job-1', 
    'artificialEnergy': 4.49055540140978e+22, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 83071, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.4746735346736e+25, 'kineticEnergy': 1.45375388926466e+25, 
    'wallTime': 116.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': EXPLICIT_PHASE, 
    'message': 'Analysis failed due to Errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Explicit Analysis exited with an error - Please see the  status file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].steps['Step-1']
mdb.models['Model-1'].ImplicitDynamicsStep(initialInc=100.0, minInc=0.001, 
    name='Step-1', previous='Initial', timePeriod=100.0)
# Save by mofid on 2024_10_15-09.22.48; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 11256, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 27.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 9 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 27.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.110 D.O.F. 1 ratio = 5.07171E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.91 D.O.F. 1 ratio = 166.125E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.105 D.O.F. 1 ratio = 326.391E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.105 D.O.F. 2 ratio = 725.811E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.105 D.O.F. 3 ratio = 344.180E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 1 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00210E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2505E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 385.209E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.25 D.O.F. 1 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.25 D.O.F. 2 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 1.00191E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 3 ratio = 65.2366E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 385.018E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.29 D.O.F. 1 ratio = 65.2490E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.29 D.O.F. 2 ratio = 1.00191E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.29 D.O.F. 3 ratio = 65.2350E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.29 D.O.F. 5 ratio = 385.257E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 100.0, 'attempts': 1, 
    'timeIncrement': 100.0, 'increment': 1, 'stepTime': 100.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:23:28 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].parts['Concrete Beam'].generateMesh()
mdb.models['Model-1'].parts['Concrete Beam-2'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].Pressure(amplitude='Amp-2', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=5000.0, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-Top-Load'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8944, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 158.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 12 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 159.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 1 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 1.00191E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 3 ratio = 65.2366E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 385.018E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 1 ratio = 65.2505E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 2 ratio = 1.00210E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 3 ratio = 65.2335E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 5 ratio = 385.257E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.123 D.O.F. 1 ratio = 181.848E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.121 D.O.F. 1 ratio = 7.29761E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 1 ratio = 631.024E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 1.87780E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 3 ratio = 324.949E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 1 ratio = 65.2513E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 2 ratio = 1.00172E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 3 ratio = 65.2350E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 1 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 1.00191E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 3 ratio = 65.2366E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 385.018E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 1 ratio = 65.2505E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 2 ratio = 1.00210E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 3 ratio = 65.2335E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 5 ratio = 385.257E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.123 D.O.F. 1 ratio = 110.771E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 1 ratio = 372.729E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 1.83072E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 3 ratio = 199.864E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 1 ratio = 65.2513E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 2 ratio = 1.00172E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 3 ratio = 65.2350E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 1 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 1.00134E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 65.2536E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 1.00191E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 3 ratio = 65.2366E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 385.018E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 1 ratio = 65.2505E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 2 ratio = 1.00210E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 3 ratio = 65.2335E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 5 ratio = 385.257E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.123 D.O.F. 1 ratio = 5.20581E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 1 ratio = 25.0584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 1.29689E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 3 ratio = 7.56444E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 65.2521E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 1.00115E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 3 ratio = 65.2319E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 385.137E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 1 ratio = 65.2513E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 2 ratio = 1.00172E+12.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 3 ratio = 65.2350E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 5 ratio = 385.185E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 7 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'CONVERGENCE JUDGED UNLIKELY.  INCREMENT WILL BE ATTEMPTED AGAIN WITH A TIME INCREMENT OF 25.000', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 100.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 62.5576E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 24.0619E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 62.5584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 62.5584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 24.0611E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 5 ratio = 24.0620E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.123 D.O.F. 1 ratio = 11.3543E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 1 ratio = 39.3247E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 117.092E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 3 ratio = 20.2905E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 62.5576E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 24.0619E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 2 ratio = 62.5599E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 5 ratio = 24.0610E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 62.5576E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 24.0619E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 62.5584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 62.5584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 24.0611E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 5 ratio = 24.0620E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.123 D.O.F. 1 ratio = 7.17656E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 1 ratio = 24.7735E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 115.009E+09  .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 3 ratio = 12.7818E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 62.5576E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 24.0619E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 2 ratio = 62.5599E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 5 ratio = 24.0610E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 2 ratio = 62.5576E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1.25 D.O.F. 5 ratio = 24.0619E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-2.25 D.O.F. 5 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 1 ratio = 62.5584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-1-LIN-2-1.25 D.O.F. 4 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 1 ratio = 62.5584E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1-LIN-2-1.25 D.O.F. 4 ratio = 24.0622E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-1-2.25 D.O.F. 5 ratio = 24.0611E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 2 ratio = 62.5591E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1.29 D.O.F. 5 ratio = 24.0620E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 82.7720E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 2 ratio = 62.5576E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1-LIN-2-1-LIN-2-1.25 D.O.F. 5 ratio = 24.0619E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 2 ratio = 62.5599E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node REBAR-1.25 D.O.F. 5 ratio = 24.0610E+09 .', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 4 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'CONVERGENCE JUDGED UNLIKELY.  INCREMENT WILL BE ATTEMPTED AGAIN WITH A TIME INCREMENT OF 6.2500', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 25.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 7.31470E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node CONCRETE-LOAD-1.131 D.O.F. 2 ratio = 7.18713E+09.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 9 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'CONVERGENCE JUDGED UNLIKELY.  INCREMENT WILL BE ATTEMPTED AGAIN WITH A TIME INCREMENT OF 1.5625', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAIN INCREMENT IS SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE PLASTICITY CALCULATION AT 1 POINTS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'CONVERGENCE JUDGED UNLIKELY.  INCREMENT WILL BE ATTEMPTED AGAIN WITH A TIME INCREMENT OF 9.76562E-02', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['Job-1']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].materials['Steel'].plastic
mdb.models['Model-1'].materials['Steel'].density.setValues(table=((7700.0, ), 
    ))
mdb.models['Model-1'].materials['Steel'].elastic.setValues(table=((
    210000000000.0, 0.3), ))
mdb.models['Model-1'].materials['C20/25'].density.setValues(table=((1000.0, ), 
    ))
mdb.models['Model-1'].materials['C20/25'].elastic.setValues(table=((
    300000000.0, 0.18), ))
mdb.models['Model-1'].materials['C20/25'].concreteDamagedPlasticity.concreteTensionStiffening.setValues(
    table=((50.0, 1.0), ))
del mdb.models['Model-1'].parts['Concrete-load'].sectionAssignments[1]
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=-8351890.0)
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=8351890.0)
# Save by mofid on 2024_10_15-09.33.09; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'IN THE OPTION *CONCRETE TENSION STIFFENING, THE CRACKING STRAIN AT INITIAL FAILURE MUST BE ZERO', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].materials['C20/25'].concreteDamagedPlasticity
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4692, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 105.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 27.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 12 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 106.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 8118.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 28.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 100.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.62443647848581, 
    'attempts': 2, 'timeIncrement': 8.62443647848581, 'increment': 1, 
    'stepTime': 8.62443647848581, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 17.2488729569716, 
    'attempts': 1, 'timeIncrement': 8.62443647848581, 'increment': 2, 
    'stepTime': 17.2488729569716, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 25.8733094354574, 
    'attempts': 1, 'timeIncrement': 8.62443647848581, 'increment': 3, 
    'stepTime': 25.8733094354574, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.6538550335647, 
    'attempts': 1, 'timeIncrement': 10.7805455981073, 'increment': 4, 
    'stepTime': 36.6538550335647, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 50.1295370311988, 
    'attempts': 1, 'timeIncrement': 13.4756819976341, 'increment': 5, 
    'stepTime': 50.1295370311988, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 66.9741395282414, 
    'attempts': 1, 'timeIncrement': 16.8446024970426, 'increment': 6, 
    'stepTime': 66.9741395282414, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 88.0298926495446, 
    'attempts': 1, 'timeIncrement': 21.0557531213033, 'increment': 7, 
    'stepTime': 88.0298926495446, 'step': 1, 'jobName': 'Job-1', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 100.0, 'attempts': 1, 
    'timeIncrement': 11.9701073504554, 'increment': 8, 'stepTime': 100.0, 
    'step': 1, 'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:35:10 2024', 
    'jobName': 'Job-1'})
del mdb.models['Model-1'].steps['Step-1']
mdb.models['Model-1'].ExplicitDynamicsStep(improvedDtMethod=ON, name='Step-1', 
    previous='Initial', timePeriod=40.0)
mdb.models['Model-1'].Pressure(amplitude='Amp-2', createStepName='Step-1', 
    distributionType=UNIFORM, field='', magnitude=8351890.0, name='Load-1', 
    region=mdb.models['Model-1'].rootAssembly.surfaces['Surf-Top-Load'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 12136, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 4116, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 26149292032.0, 'stepTime': 2.00303387641907, 
    'totalEnergy': 1709036672.0, 'jobName': 'Job-1', 
    'artificialEnergy': 87585.2890625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 433, 'distortionContrEnergy': 0.0, 
    'externalWork': 715659730223104.0, 'kineticEnergy': 715635235487744.0, 
    'wallTime': 4.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 27816181760.0, 'stepTime': 4.00148105621338, 
    'totalEnergy': 1727042304.0, 'jobName': 'Job-1', 
    'artificialEnergy': 4419877.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 865, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.88812463983821e+15, 
    'kineticEnergy': 3.88809833316352e+15, 'wallTime': 7.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 56388567040.0, 'stepTime': 6.00445127487183, 
    'totalEnergy': 4325547008.0, 'jobName': 'Job-1', 
    'artificialEnergy': 235348416.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1298, 'distortionContrEnergy': 0.0, 
    'externalWork': 9.63786903126016e+15, 
    'kineticEnergy': 9.63781749165261e+15, 'wallTime': 11.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 282785120256.0, 'stepTime': 8.0027961730957, 
    'totalEnergy': 9626159104.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2321887744.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1730, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.80567640668897e+16, 
    'kineticEnergy': 1.80564913364664e+16, 'wallTime': 15.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 81104986112.0, 'stepTime': 10.0013465881348, 
    'totalEnergy': 6749291008.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1200421504.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2162, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.91179734488842e+16, 
    'kineticEnergy': 2.91178982869565e+16, 'wallTime': 19.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462595745921135, 
    'internalEnergy': 81965801472.0, 'stepTime': 12.0045232772827, 
    'totalEnergy': 11817942016.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1218521472.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.27110617569034e+16, 
    'kineticEnergy': 4.27109887424594e+16, 'wallTime': 23.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 283578171392.0, 'stepTime': 14.0030736923218, 
    'totalEnergy': 22422167552.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2256575744.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 
    'externalWork': 5.90165443189146e+16, 
    'kineticEnergy': 5.90162823259095e+16, 'wallTime': 27.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 79917989888.0, 'stepTime': 16.0016231536865, 
    'totalEnergy': 21214480384.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1689009024.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 
    'externalWork': 7.79339167527076e+16, 'kineticEnergy': 7.79338652131e+16, 
    'wallTime': 31.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 145600774144.0, 'stepTime': 18.0043869018555, 
    'totalEnergy': 16995377152.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1767194240.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 
    'externalWork': 9.94051196903752e+16, 
    'kineticEnergy': 9.94049908413563e+16, 'wallTime': 36.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 221806592000.0, 'stepTime': 20.0025253295898, 
    'totalEnergy': 15050412032.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2121322112.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.23645416892793e+17, 
    'kineticEnergy': 1.23645202144428e+17, 'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.0046259518712759, 'internalEnergy': 81730002944.0, 
    'stepTime': 22.0006637573242, 'totalEnergy': 17026683904.0, 
    'jobName': 'Job-1', 'artificialEnergy': 2049284480.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4756, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.50359572308034e+17, 
    'kineticEnergy': 1.50359503588557e+17, 'wallTime': 44.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 251388166144.0, 'stepTime': 24.0034275054932, 
    'totalEnergy': 21938524160.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2390330624.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.79786179959325e+17, 
    'kineticEnergy': 1.79785956621025e+17, 'wallTime': 47.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 126368423936.0, 'stepTime': 26.0015659332275, 
    'totalEnergy': 15503347712.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2200576512.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.11878811250196e+17, 
    'kineticEnergy': 2.11878690991112e+17, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 122469736448.0, 'stepTime': 28.0043296813965, 
    'totalEnergy': 5647098880.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2263186688.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.46415296112361e+17, 
    'kineticEnergy': 2.46415193033146e+17, 'wallTime': 55.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 250187104256.0, 'stepTime': 30.0024681091309, 
    'totalEnergy': -3095342592.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2623959040.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.83672917634449e+17, 
    'kineticEnergy': 2.83672659936412e+17, 'wallTime': 58.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 90620985344.0, 'stepTime': 32.0006065368652, 
    'totalEnergy': 15481811968.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2563036928.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.23386641974559e+17, 
    'kineticEnergy': 3.23386538895344e+17, 'wallTime': 62.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 207438118912.0, 'stepTime': 34.0041961669922, 
    'totalEnergy': 27246231552.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2729656064.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.65698873068356e+17, 
    'kineticEnergy': 3.65698701269664e+17, 'wallTime': 66.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 161131118592.0, 'stepTime': 36.0031585693359, 
    'totalEnergy': 19038582784.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2825525760.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.10720919288283e+17, 'kineticEnergy': 4.1072078184933e+17, 
    'wallTime': 70.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 119328202752.0, 'stepTime': 38.0021209716797, 
    'totalEnergy': -4934347264.0, 'jobName': 'Job-1', 
    'artificialEnergy': 3147355648.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.58029503017386e+17, 
    'kineticEnergy': 4.58029365578433e+17, 'wallTime': 74.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 244050067456.0, 'stepTime': 40.0, 
    'totalEnergy': -49359040512.0, 'jobName': 'Job-1', 
    'artificialEnergy': 3976934656.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 
    'externalWork': 5.08058553391514e+17, 
    'kineticEnergy': 5.08058278513607e+17, 'wallTime': 77.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:41:43 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#2a ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].faces.getSequenceFromMask(
    ('[#f ]', ), ), name='Set-10')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-1', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-10'], u1=SET, u2=SET, 
    u3=UNSET, ur1=SET, ur2=SET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), edges=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#12a ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['Rebar-1-lin-2-1-lin-2-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), faces=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].faces.getSequenceFromMask(
    ('[#f ]', ), ), name='Set-11')
mdb.models['Model-1'].ZasymmBC(createStepName='Initial', localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-11'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'BOUNDARY CONDITION TYPE ZASYMM IS NOT SUPPORTED IN Abaqus/Explicit', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\DirectoryName2\\Job-1.odb', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(typeName=ZSYMM)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 11732, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 5587 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8476, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 26149292032.0, 'stepTime': 2.00303387641907, 
    'totalEnergy': 1709036672.0, 'jobName': 'Job-1', 
    'artificialEnergy': 87585.2890625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 433, 'distortionContrEnergy': 0.0, 
    'externalWork': 715659730223104.0, 'kineticEnergy': 715635235487744.0, 
    'wallTime': 4.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 27816181760.0, 'stepTime': 4.00148105621338, 
    'totalEnergy': 1727042304.0, 'jobName': 'Job-1', 
    'artificialEnergy': 4419877.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 865, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.88812463983821e+15, 
    'kineticEnergy': 3.88809833316352e+15, 'wallTime': 7.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 56388567040.0, 'stepTime': 6.00445127487183, 
    'totalEnergy': 4325547008.0, 'jobName': 'Job-1', 
    'artificialEnergy': 235348416.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1298, 'distortionContrEnergy': 0.0, 
    'externalWork': 9.63786903126016e+15, 
    'kineticEnergy': 9.63781749165261e+15, 'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 282785120256.0, 'stepTime': 8.0027961730957, 
    'totalEnergy': 9626159104.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2321887744.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1730, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.80567640668897e+16, 
    'kineticEnergy': 1.80564913364664e+16, 'wallTime': 13.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 81104986112.0, 'stepTime': 10.0013465881348, 
    'totalEnergy': 6749291008.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1200421504.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2162, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.91179734488842e+16, 
    'kineticEnergy': 2.91178982869565e+16, 'wallTime': 16.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462595745921135, 
    'internalEnergy': 81965801472.0, 'stepTime': 12.0045232772827, 
    'totalEnergy': 11817942016.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1218521472.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.27110617569034e+16, 
    'kineticEnergy': 4.27109887424594e+16, 'wallTime': 19.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 283578171392.0, 'stepTime': 14.0030736923218, 
    'totalEnergy': 22422167552.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2256575744.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 
    'externalWork': 5.90165443189146e+16, 
    'kineticEnergy': 5.90162823259095e+16, 'wallTime': 22.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 79917989888.0, 'stepTime': 16.0016231536865, 
    'totalEnergy': 21214480384.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1689009024.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 
    'externalWork': 7.79339167527076e+16, 'kineticEnergy': 7.79338652131e+16, 
    'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 145600774144.0, 'stepTime': 18.0043869018555, 
    'totalEnergy': 16995377152.0, 'jobName': 'Job-1', 
    'artificialEnergy': 1767194240.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 
    'externalWork': 9.94051196903752e+16, 
    'kineticEnergy': 9.94049908413563e+16, 'wallTime': 28.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 221806592000.0, 'stepTime': 20.0025253295898, 
    'totalEnergy': 15050412032.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2121322112.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.23645416892793e+17, 
    'kineticEnergy': 1.23645202144428e+17, 'wallTime': 31.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.0046259518712759, 'internalEnergy': 81730002944.0, 
    'stepTime': 22.0006637573242, 'totalEnergy': 17026683904.0, 
    'jobName': 'Job-1', 'artificialEnergy': 2049284480.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4756, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.50359572308034e+17, 
    'kineticEnergy': 1.50359503588557e+17, 'wallTime': 34.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 251388166144.0, 'stepTime': 24.0034275054932, 
    'totalEnergy': 21938524160.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2390330624.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.79786179959325e+17, 
    'kineticEnergy': 1.79785956621025e+17, 'wallTime': 38.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 126368423936.0, 'stepTime': 26.0015659332275, 
    'totalEnergy': 15503347712.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2200576512.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.11878811250196e+17, 
    'kineticEnergy': 2.11878690991112e+17, 'wallTime': 41.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 122469736448.0, 'stepTime': 28.0043296813965, 
    'totalEnergy': 5647098880.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2263186688.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.46415296112361e+17, 
    'kineticEnergy': 2.46415193033146e+17, 'wallTime': 44.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 250187104256.0, 'stepTime': 30.0024681091309, 
    'totalEnergy': -3095342592.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2623959040.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.83672917634449e+17, 
    'kineticEnergy': 2.83672659936412e+17, 'wallTime': 47.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 90620985344.0, 'stepTime': 32.0006065368652, 
    'totalEnergy': 15481811968.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2563036928.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.23386641974559e+17, 
    'kineticEnergy': 3.23386538895344e+17, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 207438118912.0, 'stepTime': 34.0041961669922, 
    'totalEnergy': 27246231552.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2729656064.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.65698873068356e+17, 
    'kineticEnergy': 3.65698701269664e+17, 'wallTime': 54.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 161131118592.0, 'stepTime': 36.0031585693359, 
    'totalEnergy': 19038582784.0, 'jobName': 'Job-1', 
    'artificialEnergy': 2825525760.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.10720919288283e+17, 'kineticEnergy': 4.1072078184933e+17, 
    'wallTime': 57.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 119328202752.0, 'stepTime': 38.0021209716797, 
    'totalEnergy': -4934347264.0, 'jobName': 'Job-1', 
    'artificialEnergy': 3147355648.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.58029503017386e+17, 
    'kineticEnergy': 4.58029365578433e+17, 'wallTime': 60.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 244050067456.0, 'stepTime': 40.0, 
    'totalEnergy': -49359040512.0, 'jobName': 'Job-1', 
    'artificialEnergy': 3976934656.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 
    'externalWork': 5.08058553391514e+17, 
    'kineticEnergy': 5.08058278513607e+17, 'wallTime': 63.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:47:45 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-Top-Beam'])
# Save by mofid on 2024_10_15-09.48.39; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10404, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 5587 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9564, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 1.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 2.00303387641907, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 433, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 4.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 4.00148105621338, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 865, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 7.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 6.00445127487183, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1298, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 8.0027961730957, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1730, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 13.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 10.0013465881348, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2162, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 17.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 12.0045232772827, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 20.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 14.0030736923218, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 23.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 16.0016231536865, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 26.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 18.0043869018555, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 29.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 20.0025253295898, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 32.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 22.0006637573242, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4756, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 35.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 24.0034275054932, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 37.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 26.0015659332275, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 28.0043296813965, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 43.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 30.0024681091309, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 46.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 32.0006065368652, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 48.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 34.0041961669922, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 36.0031585693359, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 54.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 38.0021209716797, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 57.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 40.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 60.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:50:02 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(ur1=UNSET, ur2=
    UNSET)
mdb.models['Model-1'].boundaryConditions['BC-2'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 460, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 13880, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 2.00303387641907, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 433, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 4.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 4.00148105621338, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 865, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 7.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 6.00445127487183, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1298, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 9.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 8.0027961730957, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1730, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 12.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 10.0013465881348, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2162, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 14.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 12.0045232772827, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 17.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 14.0030736923218, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 19.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 16.0016231536865, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 23.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 18.0043869018555, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 20.0025253295898, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 28.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 22.0006637573242, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4756, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 31.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 24.0034275054932, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 34.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 26.0015659332275, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 37.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 28.0043296813965, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 39.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 30.0024681091309, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 42.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 32.0006065368652, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 45.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 34.0041961669922, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 49.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 36.0031585693359, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 38.0021209716797, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 54.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 40.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 56.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:51:59 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=8351890000.0)
# Save by mofid on 2024_10_15-09.52.30; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 14196, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 2484, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 2.00303387641907, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 433, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 3.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 4.00148105621338, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 865, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 5.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 6.00445127487183, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1298, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 8.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 8.0027961730957, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1730, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 10.0013465881348, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2162, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 13.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 12.0045232772827, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 15.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 14.0030736923218, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 18.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 16.0016231536865, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 22.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 18.0043869018555, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 20.0025253295898, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 28.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 22.0006637573242, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4756, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 31.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 24.0034275054932, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 33.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 26.0015659332275, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 35.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 28.0043296813965, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 39.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 30.0024681091309, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 42.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 32.0006065368652, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 44.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 34.0041961669922, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 47.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 36.0031585693359, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 49.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 38.0021209716797, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 52.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 40.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 55.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 09:53:48 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-1'].suppress()
mdb.models['Model-1'].AccelerationBC(a1=UNSET, a2=UNSET, a3=0.0, amplitude=
    UNSET, ar1=UNSET, ar2=UNSET, ar3=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-3', 
    region=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].sets['Set-1'])
mdb.models['Model-1'].boundaryConditions['BC-3'].setValuesInStep(a3=100000.0, 
    amplitude='Amp-2', stepName='Step-1')
# Save by mofid on 2024_10_15-09.58.53; build 2023 2022_09_28-21.41.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].boundaryConditions['BC-3'].setValues(a2=0.0, a3=UNSET)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValuesInStep(a2=100000.0, 
    a3=FREED, stepName='Step-1')
mdb.models['Model-1'].boundaryConditions['BC-3'].setValuesInStep(a2=-100000.0, 
    stepName='Step-1')
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 8088, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 10724, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 5661456.5, 
    'stepTime': 2.00303387641907, 'totalEnergy': -5.01380684552602e+15, 
    'jobName': 'Job-1', 'artificialEnergy': 280149.0625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 433, 
    'distortionContrEnergy': 0.0, 'externalWork': 2.84649620382985e+21, 
    'kineticEnergy': 2.84649113728027e+21, 'wallTime': 3.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 79140912.0, 
    'stepTime': 4.00148105621338, 'totalEnergy': -7.10009977233736e+16, 
    'jobName': 'Job-1', 'artificialEnergy': 3240764.25, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 865, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.54477937041438e+22, 
    'kineticEnergy': 1.54477227724497e+22, 'wallTime': 6.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 358961344.0, 
    'stepTime': 6.00445127487183, 'totalEnergy': 4.2398233518932e+16, 
    'jobName': 'Job-1', 'artificialEnergy': 12424769.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1298, 
    'distortionContrEnergy': 0.0, 'externalWork': 3.81772212068026e+22, 
    'kineticEnergy': 3.81772662427988e+22, 'wallTime': 8.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 988087360.0, 
    'stepTime': 8.0027961730957, 'totalEnergy': 2.08093240819397e+18, 
    'jobName': 'Job-1', 'artificialEnergy': 29072470.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1730, 
    'distortionContrEnergy': 0.0, 'externalWork': 7.09302124468079e+22, 
    'kineticEnergy': 7.09322931098358e+22, 'wallTime': 11.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596165016294, 'internalEnergy': 2297449472.0, 
    'stepTime': 10.0013465881348, 'totalEnergy': 4.74481158778362e+18, 
    'jobName': 'Job-1', 'artificialEnergy': 61507888.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2162, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.13747866148459e+23, 
    'kineticEnergy': 1.13752603935267e+23, 'wallTime': 14.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596165016294, 'internalEnergy': 4488653824.0, 
    'stepTime': 12.0045232772827, 'totalEnergy': 8.03644153808919e+18, 
    'jobName': 'Job-1', 'artificialEnergy': 113819104.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2595, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.66764258976263e+23, 
    'kineticEnergy': 1.66772293397999e+23, 'wallTime': 17.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596025317907, 'internalEnergy': 7194311168.0, 
    'stepTime': 14.0030736923218, 'totalEnergy': 1.19418012868333e+19, 
    'jobName': 'Job-1', 'artificialEnergy': 178249232.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3027, 
    'distortionContrEnergy': 0.0, 'externalWork': 2.2973452571488e+23, 
    'kineticEnergy': 2.29746469261092e+23, 'wallTime': 19.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 10827541504.0, 'stepTime': 16.0016231536865, 
    'totalEnergy': 1.65206954704739e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 267135504.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.02769436900744e+23, 
    'kineticEnergy': 3.02785938089779e+23, 'wallTime': 22.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 14982137856.0, 'stepTime': 18.0043869018555, 
    'totalEnergy': 2.1736548834713e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 389395008.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.86073023611375e+23, 
    'kineticEnergy': 3.86094748975977e+23, 'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 18962946048.0, 'stepTime': 20.0025253295898, 
    'totalEnergy': 2.75331037676039e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 627010752.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 
    'externalWork': 4.79260534323406e+23, 
    'kineticEnergy': 4.79288096353125e+23, 'wallTime': 27.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 23348527104.0, 'stepTime': 22.0006637573242, 
    'totalEnergy': 2.64159823615974e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 947455040.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4756, 'distortionContrEnergy': 0.0, 
    'externalWork': 5.82512653453887e+23, 
    'kineticEnergy': 5.82539062562102e+23, 'wallTime': 30.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 28701454336.0, 'stepTime': 24.0034275054932, 
    'totalEnergy': 2.80962714243275e+18, 'jobName': 'Job-1', 
    'artificialEnergy': 1380389760.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 
    'externalWork': 6.96101434449109e+23, 
    'kineticEnergy': 6.96104244695277e+23, 'wallTime': 33.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 33607897088.0, 'stepTime': 26.0015659332275, 
    'totalEnergy': -2.287853459667e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 1923589504.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 
    'externalWork': 8.19501433333347e+23, 
    'kineticEnergy': 8.19478519018443e+23, 'wallTime': 35.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 38679990272.0, 'stepTime': 28.0043296813965, 
    'totalEnergy': -5.07065603681923e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 2552135680.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 
    'externalWork': 9.53283994769729e+23, 'kineticEnergy': 9.5323333828112e+23, 
    'wallTime': 38.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 44238671872.0, 'stepTime': 30.0024681091309, 
    'totalEnergy': -8.04857288968309e+19, 'jobName': 'Job-1', 
    'artificialEnergy': 3249543168.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.09683115283178e+24, 
    'kineticEnergy': 1.09675066449924e+24, 'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 52389261312.0, 'stepTime': 32.0006065368652, 
    'totalEnergy': -1.12444186646326e+20, 'jobName': 'Job-1', 
    'artificialEnergy': 4002025216.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.2504403612677e+24, 'kineticEnergy': 1.25032780730581e+24, 
    'wallTime': 43.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 60590776320.0, 'stepTime': 34.0041961669922, 
    'totalEnergy': -1.46512053055663e+20, 'jobName': 'Job-1', 
    'artificialEnergy': 4741093888.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.41450195606438e+24, 
    'kineticEnergy': 1.41435539091811e+24, 'wallTime': 46.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 71155908608.0, 'stepTime': 36.0031585693359, 
    'totalEnergy': -1.82718003388095e+20, 'jobName': 'Job-1', 
    'artificialEnergy': 5499697152.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.58825817956293e+24, 
    'kineticEnergy': 1.58807558561964e+24, 'wallTime': 49.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0020294189453, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 78413021184.0, 'stepTime': 38.0020294189453, 
    'totalEnergy': -2.20531246206288e+20, 'jobName': 'Job-1', 
    'artificialEnergy': 7643947520.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.77206816681202e+24, 
    'kineticEnergy': 1.77184767057427e+24, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596025317907, 
    'internalEnergy': 90199162880.0, 'stepTime': 40.0, 
    'totalEnergy': -2.59458215138581e+20, 'jobName': 'Job-1', 
    'artificialEnergy': 10367785984.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.96585078096078e+24, 
    'kineticEnergy': 1.96559122950705e+24, 'wallTime': 54.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 10:00:43 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=835189.0)
mdb.models['Model-1'].boundaryConditions['BC-3'].setValuesInStep(a2=-100.0, 
    stepName='Step-1')
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1192, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 1132, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 2.14969658851624, 'stepTime': 2.00303387641907, 
    'totalEnergy': 3867341824.0, 'jobName': 'Job-1', 
    'artificialEnergy': 3.10065775011026e-06, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 433, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.84649440726221e+15, 
    'kineticEnergy': 2.84649816535859e+15, 'wallTime': 2.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 5.78088474273682, 'stepTime': 4.00148105621338, 
    'totalEnergy': -104648736768.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.000126950981211849, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 865, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.54478334275748e+16, 
    'kineticEnergy': 1.54477292746179e+16, 'wallTime': 5.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 31.6316509246826, 'stepTime': 6.00445127487183, 
    'totalEnergy': -616626454528.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.000366859807400033, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 1298, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.81771611352596e+16, 'kineticEnergy': 3.8176542659969e+16, 
    'wallTime': 8.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 1.88659071922302, 'stepTime': 8.0027961730957, 
    'totalEnergy': -1374872797184.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.000657842960208654, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 1730, 'distortionContrEnergy': 0.0, 
    'externalWork': 7.09294521581568e+16, 
    'kineticEnergy': 7.09280777686221e+16, 'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 3.77518677711487, 'stepTime': 10.0013465881348, 
    'totalEnergy': -2377026109440.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.00105190230533481, 'phase': EXPLICIT_PHASE, 
    'step': 1, 'increment': 2162, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.13745551635251e+17, 
    'kineticEnergy': 1.13743172223369e+17, 'wallTime': 13.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 113.400901794434, 'stepTime': 12.0045232772827, 
    'totalEnergy': 956371763200.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.105101324617863, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.66759801848594e+17, 
    'kineticEnergy': 1.66760763921269e+17, 'wallTime': 15.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 194.884994506836, 'stepTime': 14.0030736923218, 
    'totalEnergy': 7774531485696.0, 'jobName': 'Job-1', 
    'artificialEnergy': 4.66635751724243, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 
    'externalWork': 2.29728300195381e+17, 
    'kineticEnergy': 2.29736082676122e+17, 'wallTime': 18.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 3833.00219726562, 'stepTime': 16.0016231536865, 
    'totalEnergy': 15705641582592.0, 'jobName': 'Job-1', 
    'artificialEnergy': 131.764984130859, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.0276193414126e+17, 'kineticEnergy': 3.02777636541694e+17, 
    'wallTime': 20.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.0046259518712759, 
    'internalEnergy': 17083.12890625, 'stepTime': 18.0043869018555, 
    'totalEnergy': 24917290516480.0, 'jobName': 'Job-1', 
    'artificialEnergy': 530.799255371094, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 
    'externalWork': 3.86064611553575e+17, 
    'kineticEnergy': 3.86089522363892e+17, 'wallTime': 23.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.0046259518712759, 'internalEnergy': 37656.140625, 
    'stepTime': 20.0025253295898, 'totalEnergy': 35227275624448.0, 
    'jobName': 'Job-1', 'artificialEnergy': 1697.24572753906, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4324, 
    'distortionContrEnergy': 0.0, 'externalWork': 4.79251589261951e+17, 
    'kineticEnergy': 4.79286807993778e+17, 'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 69303.1796875, 'stepTime': 22.0006637573242, 
    'totalEnergy': 46449941282816.0, 'jobName': 'Job-1', 
    'artificialEnergy': 4279.71630859375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4756, 'distortionContrEnergy': 0.0, 
    'externalWork': 5.82503805648634e+17, 
    'kineticEnergy': 5.82550260014907e+17, 'wallTime': 27.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 109758.75, 
    'stepTime': 24.0034275054932, 'totalEnergy': 58723850518528.0, 
    'jobName': 'Job-1', 'artificialEnergy': 7247.412109375, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 5189, 
    'distortionContrEnergy': 0.0, 'externalWork': 6.9609524526737e+17, 
    'kineticEnergy': 6.96153931700503e+17, 'wallTime': 30.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 159009.125, 
    'stepTime': 26.0015659332275, 'totalEnergy': 72151591813120.0, 
    'jobName': 'Job-1', 'artificialEnergy': 10477.3603515625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 5621, 
    'distortionContrEnergy': 0.0, 'externalWork': 8.19501131834065e+17, 
    'kineticEnergy': 8.19573287284638e+17, 'wallTime': 33.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 218254.671875, 'stepTime': 28.0043296813965, 
    'totalEnergy': 86679117365248.0, 'jobName': 'Job-1', 
    'artificialEnergy': 13280.787109375, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 
    'externalWork': 9.53292730358825e+17, 
    'kineticEnergy': 9.53379454338466e+17, 'wallTime': 35.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 298138.0, 
    'stepTime': 30.0024681091309, 'totalEnergy': 102270318411776.0, 
    'jobName': 'Job-1', 'artificialEnergy': 16295.4013671875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 6486, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.09685218402632e+18, 
    'kineticEnergy': 1.0969544386077e+18, 'wallTime': 37.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 410271.96875, 
    'stepTime': 32.0006065368652, 'totalEnergy': 119025287823360.0, 
    'jobName': 'Job-1', 'artificialEnergy': 20306.888671875, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 6918, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.2504767732929e+18, 
    'kineticEnergy': 1.25059579542661e+18, 'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 564984.5, 
    'stepTime': 34.0041961669922, 'totalEnergy': 136739679109120.0, 
    'jobName': 'Job-1', 'artificialEnergy': 25537.423828125, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 7351, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.41455703094487e+18, 
    'kineticEnergy': 1.41469378270357e+18, 'wallTime': 42.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 777872.125, 
    'stepTime': 36.0031585693359, 'totalEnergy': 155657936306176.0, 
    'jobName': 'Job-1', 'artificialEnergy': 32944.81640625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 7783, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.58833511859277e+18, 
    'kineticEnergy': 1.58849083692705e+18, 'wallTime': 45.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 1036032.8125, 
    'stepTime': 38.0021209716797, 'totalEnergy': 175672215470080.0, 
    'jobName': 'Job-1', 'artificialEnergy': 46189.12890625, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 8215, 
    'distortionContrEnergy': 0.0, 'externalWork': 1.77217841055924e+18, 
    'kineticEnergy': 1.77235405754178e+18, 'wallTime': 47.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 1366752.875, 
    'stepTime': 40.0, 'totalEnergy': 196248900468736.0, 'jobName': 'Job-1', 
    'artificialEnergy': 64438.12890625, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.9659805290943e+18, 'kineticEnergy': 1.96617679191985e+18, 
    'wallTime': 50.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 10:05:17 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-3'].setValuesInStep(a2=-2.0, 
    stepName='Step-1')
mdb.models['Model-1'].boundaryConditions['BC-3'].suppress()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3940, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 1 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 9844, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 94986829824.0, 'stepTime': 2.00303387641907, 
    'totalEnergy': 5977023.5, 'jobName': 'Job-1', 
    'artificialEnergy': 14721939.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 433, 'distortionContrEnergy': 0.0, 
    'externalWork': 2307116236800.0, 'kineticEnergy': 2211511271424.0, 
    'wallTime': 3.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 89713500160.0, 'stepTime': 4.00148105621338, 
    'totalEnergy': 5690510.0, 'jobName': 'Job-1', 
    'artificialEnergy': 34683492.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 865, 'distortionContrEnergy': 0.0, 
    'externalWork': 12083428065280.0, 'kineticEnergy': 11992969510912.0, 
    'wallTime': 5.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 105560956928.0, 'stepTime': 6.00445127487183, 
    'totalEnergy': 4471630.0, 'jobName': 'Job-1', 
    'artificialEnergy': 32111944.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1298, 'distortionContrEnergy': 0.0, 
    'externalWork': 29749160181760.0, 'kineticEnergy': 29642733912064.0, 
    'wallTime': 8.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 105998565376.0, 'stepTime': 8.0027961730957, 
    'totalEnergy': 4150179.5, 'jobName': 'Job-1', 
    'artificialEnergy': 38269852.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 1730, 'distortionContrEnergy': 0.0, 
    'externalWork': 55183434317824.0, 'kineticEnergy': 55076466982912.0, 
    'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 87255711744.0, 'stepTime': 10.0013465881348, 
    'totalEnergy': 4268036.5, 'jobName': 'Job-1', 
    'artificialEnergy': 42549804.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2162, 'distortionContrEnergy': 0.0, 
    'externalWork': 88407581655040.0, 'kineticEnergy': 88319308333056.0, 
    'wallTime': 13.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 91817443328.0, 'stepTime': 12.0045232772827, 
    'totalEnergy': 4282431.5, 'jobName': 'Job-1', 
    'artificialEnergy': 47364160.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 2595, 'distortionContrEnergy': 0.0, 
    'externalWork': 129569969405952.0, 'kineticEnergy': 129477107515392.0, 
    'wallTime': 15.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 108691292160.0, 'stepTime': 14.0030736923218, 
    'totalEnergy': 10504683.0, 'jobName': 'Job-1', 
    'artificialEnergy': 52558136.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3027, 'distortionContrEnergy': 0.0, 
    'externalWork': 178482332041216.0, 'kineticEnergy': 178372558716928.0, 
    'wallTime': 18.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 103589814272.0, 'stepTime': 16.0016231536865, 
    'totalEnergy': 2327896.25, 'jobName': 'Job-1', 
    'artificialEnergy': 59174696.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3459, 'distortionContrEnergy': 0.0, 
    'externalWork': 235195311587328.0, 'kineticEnergy': 235090554650624.0, 
    'wallTime': 20.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 91666620416.0, 'stepTime': 18.0043869018555, 
    'totalEnergy': -6968660.0, 'jobName': 'Job-1', 
    'artificialEnergy': 69506536.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 3892, 'distortionContrEnergy': 0.0, 
    'externalWork': 299887165964288.0, 'kineticEnergy': 299794253742080.0, 
    'wallTime': 23.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 100192272384.0, 'stepTime': 20.0025253295898, 
    'totalEnergy': -15121650.0, 'jobName': 'Job-1', 
    'artificialEnergy': 71117952.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4324, 'distortionContrEnergy': 0.0, 
    'externalWork': 372259411722240.0, 'kineticEnergy': 372157943119872.0, 
    'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 104132657152.0, 'stepTime': 22.0006637573242, 
    'totalEnergy': -12110482.0, 'jobName': 'Job-1', 
    'artificialEnergy': 74371408.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 4756, 'distortionContrEnergy': 0.0, 
    'externalWork': 452435176849408.0, 'kineticEnergy': 452329748824064.0, 
    'wallTime': 28.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 92432195584.0, 'stepTime': 24.0034275054932, 
    'totalEnergy': -28928284.0, 'jobName': 'Job-1', 
    'artificialEnergy': 76426816.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5189, 'distortionContrEnergy': 0.0, 
    'externalWork': 540637732536320.0, 'kineticEnergy': 540543947898880.0, 
    'wallTime': 30.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 102829514752.0, 'stepTime': 26.0015659332275, 
    'totalEnergy': -34564916.0, 'jobName': 'Job-1', 
    'artificialEnergy': 83754368.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 5621, 'distortionContrEnergy': 0.0, 
    'externalWork': 636502006562816.0, 'kineticEnergy': 636397786497024.0, 
    'wallTime': 33.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 106806599680.0, 'stepTime': 28.0043296813965, 
    'totalEnergy': -36224592.0, 'jobName': 'Job-1', 
    'artificialEnergy': 91537984.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6054, 'distortionContrEnergy': 0.0, 
    'externalWork': 740430819885056.0, 'kineticEnergy': 740322573287424.0, 
    'wallTime': 35.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 96202514432.0, 'stepTime': 30.0024681091309, 
    'totalEnergy': -18234000.0, 'jobName': 'Job-1', 
    'artificialEnergy': 89884768.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6486, 'distortionContrEnergy': 0.0, 
    'externalWork': 851907836903424.0, 'kineticEnergy': 851810126397440.0, 
    'wallTime': 38.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 88733908992.0, 'stepTime': 32.0006065368652, 
    'totalEnergy': -46290104.0, 'jobName': 'Job-1', 
    'artificialEnergy': 91722368.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 6918, 'distortionContrEnergy': 0.0, 
    'externalWork': 971186863341568.0, 'kineticEnergy': 971096601919488.0, 
    'wallTime': 40.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 102451691520.0, 'stepTime': 34.0041961669922, 
    'totalEnergy': -49113036.0, 'jobName': 'Job-1', 
    'artificialEnergy': 93460024.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7351, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.0986183416873e+15, 'kineticEnergy': 1.0985143229481e+15, 
    'wallTime': 43.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 106992713728.0, 'stepTime': 36.0031585693359, 
    'totalEnergy': -65213204.0, 'jobName': 'Job-1', 
    'artificialEnergy': 102933904.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 7783, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.23358279001702e+15, 
    'kineticEnergy': 1.23347420787507e+15, 'wallTime': 46.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 93665550336.0, 'stepTime': 38.0021209716797, 
    'totalEnergy': -46117296.0, 'jobName': 'Job-1', 
    'artificialEnergy': 108058744.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8215, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.37635904566067e+15, 
    'kineticEnergy': 1.37626375107379e+15, 'wallTime': 48.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 93569540096.0, 'stepTime': 40.0, 
    'totalEnergy': -81371312.0, 'jobName': 'Job-1', 
    'artificialEnergy': 106572448.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 8647, 'distortionContrEnergy': 0.0, 
    'externalWork': 1.52684772039066e+15, 
    'kineticEnergy': 1.52675242580378e+15, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 10:11:21 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].loads['Load-1'].setValues(magnitude=8351.0)
mdb.models['Model-1'].boundaryConditions['BC-3'].resume()
mdb.models['Model-1'].boundaryConditions['BC-2'].resume()
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(typeName=XSYMM)
mdb.models['Model-1'].ZsymmBC(createStepName='Initial', localCsys=None, name=
    'BC-4', region=
    mdb.models['Model-1'].rootAssembly.instances['Concrete Beam-1-lin-2-1-lin-2-1'].sets['Set-1'])
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DILATION ANGLE OF 40.000 MAY RESULT IN DECREASING PLASTIC WORK OR UNSTABLE MATERIAL BEHAVIOR AT HIGH CONFINING STRESS STATES. SET THE DILATION ANGLE LESS THAN 32.485 TO ENSURE STABLE MATERIAL BEHAVIOR UNDER ALL LOADING CONDITIONS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'THE OPTION *BOUNDARY,TYPE=DISPLACEMENT HAS BEEN USED; CHECK STATUS FILE BETWEEN STEPS FOR WARNINGS ON ANY JUMPS PRESCRIBED ACROSS THE STEPS IN DISPLACEMENT VALUES OF TRANSLATIONAL DOF. FOR ROTATIONAL DOF MAKE SURE THAT THERE ARE NO SUCH JUMPS. ALL JUMPS IN DISPLACEMENTS ACROSS STEPS ARE IGNORED', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': PACKAGER_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 3392, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': PACKAGER_PHASE, 
    'message': 'There are 2 warning messages in the data (.dat) file.  Please check the data file for possible errors in the input file.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': PACKAGER_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': EXPLICIT_PHASE, 
    'clientHost': 'DESKTOP-QCIN5NE', 'handle': 14768, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 0.0, 
    'stableTimeIncrement': 0.00462596258148551, 'internalEnergy': 0.0, 
    'stepTime': 0.0, 'totalEnergy': 0.0, 'jobName': 'Job-1', 
    'artificialEnergy': 0.0, 'phase': EXPLICIT_PHASE, 'step': 1, 
    'increment': 0, 'distortionContrEnergy': 0.0, 'externalWork': 0.0, 
    'kineticEnergy': 0.0, 'wallTime': 0.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 2.00303387641907, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 1.09341508505167e-05, 'stepTime': 2.00303387641907, 
    'totalEnergy': -2199374.25, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 433, 
    'distortionContrEnergy': 0.0, 'externalWork': 1138599657472.0, 
    'kineticEnergy': 1138597429248.0, 'wallTime': 5.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 4.00148105621338, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 0.00465452671051025, 'stepTime': 4.00148105621338, 
    'totalEnergy': 54671024.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 865, 
    'distortionContrEnergy': 0.0, 'externalWork': 6179139354624.0, 
    'kineticEnergy': 6179194404864.0, 'wallTime': 8.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 6.00445127487183, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.0185593888163567, 'stepTime': 6.00445127487183, 
    'totalEnergy': -167948624.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1298, 
    'distortionContrEnergy': 0.0, 'externalWork': 15270951256064.0, 
    'kineticEnergy': 15270783483904.0, 'wallTime': 10.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 8.0027961730957, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.0552976503968239, 'stepTime': 8.0027961730957, 
    'totalEnergy': -631880000.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 1730, 
    'distortionContrEnergy': 0.0, 'externalWork': 28371901743104.0, 
    'kineticEnergy': 28371268403200.0, 'wallTime': 14.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 10.0013465881348, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.00139212911017239, 'stepTime': 10.0013465881348, 
    'totalEnergy': 122463920.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2162, 
    'distortionContrEnergy': 0.0, 'externalWork': 45498434060288.0, 
    'kineticEnergy': 45498555695104.0, 'wallTime': 16.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 12.0045232772827, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 1.00215856946306e-07, 'stepTime': 12.0045232772827, 
    'totalEnergy': 1553577600.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 2595, 
    'distortionContrEnergy': 0.0, 'externalWork': 66704478568448.0, 
    'kineticEnergy': 66706030460928.0, 'wallTime': 19.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 14.0030736923218, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.00242520635947585, 'stepTime': 14.0030736923218, 
    'totalEnergy': 3260585728.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3027, 
    'distortionContrEnergy': 0.0, 'externalWork': 91892091977728.0, 
    'kineticEnergy': 91895355146240.0, 'wallTime': 22.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 16.0016231536865, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.000622331048361957, 'stepTime': 16.0016231536865, 
    'totalEnergy': 5238236672.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3459, 
    'distortionContrEnergy': 0.0, 'externalWork': 121105587109888.0, 
    'kineticEnergy': 121110829989888.0, 'wallTime': 25.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 18.0043869018555, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 0.244425281882286, 'stepTime': 18.0043869018555, 
    'totalEnergy': 2284873472.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 3892, 
    'distortionContrEnergy': 0.0, 'externalWork': 154426354434048.0, 
    'kineticEnergy': 154428636135424.0, 'wallTime': 27.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 20.0025253295898, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.413161635398865, 'stepTime': 20.0025253295898, 
    'totalEnergy': -2874267904.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4324, 
    'distortionContrEnergy': 0.0, 'externalWork': 191699909345280.0, 
    'kineticEnergy': 191697023664128.0, 'wallTime': 30.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 22.0006637573242, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 0.0390584319829941, 'stepTime': 22.0006637573242, 
    'totalEnergy': -8599148544.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 4756, 
    'distortionContrEnergy': 0.0, 'externalWork': 232998519701504.0, 
    'kineticEnergy': 232989912989696.0, 'wallTime': 32.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 24.0034275054932, 
    'stableTimeIncrement': 0.00462596165016294, 
    'internalEnergy': 0.0612688139081001, 'stepTime': 24.0034275054932, 
    'totalEnergy': -14894086144.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 5189, 
    'distortionContrEnergy': 0.0, 'externalWork': 278431757500416.0, 
    'kineticEnergy': 278416859332608.0, 'wallTime': 35.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 26.0015659332275, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 0.120025634765625, 'stepTime': 26.0015659332275, 
    'totalEnergy': -21724059648.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 5621, 
    'distortionContrEnergy': 0.0, 'externalWork': 327789790101504.0, 
    'kineticEnergy': 327768046829568.0, 'wallTime': 38.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 28.0043296813965, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 0.0097463084384799, 'stepTime': 28.0043296813965, 
    'totalEnergy': -29128800256.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 6054, 
    'distortionContrEnergy': 0.0, 'externalWork': 381301089632256.0, 
    'kineticEnergy': 381271964385280.0, 'wallTime': 41.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 30.0024681091309, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.0882012769579887, 'stepTime': 30.0024681091309, 
    'totalEnergy': -37070217216.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 6486, 
    'distortionContrEnergy': 0.0, 'externalWork': 438718561255424.0, 
    'kineticEnergy': 438681517162496.0, 'wallTime': 44.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 32.0006065368652, 
    'stableTimeIncrement': 0.00462596118450165, 
    'internalEnergy': 0.0024286184925586, 'stepTime': 32.0006065368652, 
    'totalEnergy': -45598072832.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 6918, 
    'distortionContrEnergy': 0.0, 'externalWork': 500161088323584.0, 
    'kineticEnergy': 500115487850496.0, 'wallTime': 46.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 34.0041961669922, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 0.244427695870399, 'stepTime': 34.0041961669922, 
    'totalEnergy': -34274514944.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 7351, 
    'distortionContrEnergy': 0.0, 'externalWork': 565785370034176.0, 
    'kineticEnergy': 565751077404672.0, 'wallTime': 48.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 36.0031585693359, 
    'stableTimeIncrement': 0.00462596258148551, 
    'internalEnergy': 0.792245209217072, 'stepTime': 36.0031585693359, 
    'totalEnergy': -15282526208.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 7783, 
    'distortionContrEnergy': 0.0, 'externalWork': 635289416499200.0, 
    'kineticEnergy': 635274115678208.0, 'wallTime': 51.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 38.0021209716797, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 0.295780181884766, 'stepTime': 38.0021209716797, 
    'totalEnergy': 4833158656.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 8215, 
    'distortionContrEnergy': 0.0, 'externalWork': 708820129021952.0, 
    'kineticEnergy': 708824960860160.0, 'wallTime': 54.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 40.0, 
    'stableTimeIncrement': 0.00462595978751779, 
    'internalEnergy': 0.295780062675476, 'stepTime': 40.0, 
    'totalEnergy': 25691105280.0, 'jobName': 'Job-1', 'artificialEnergy': 0.0, 
    'phase': EXPLICIT_PHASE, 'step': 1, 'increment': 8647, 
    'distortionContrEnergy': 0.0, 'externalWork': 786335027691520.0, 
    'kineticEnergy': 786360730386432.0, 'wallTime': 56.0})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': EXPLICIT_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': EXPLICIT_PHASE, 
    'message': 'Phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Tue Oct 15 10:16:08 2024', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].boundaryConditions['BC-3'].suppress()
# Save by mofid on 2024_10_15-10.16.56; build 2023 2022_09_28-21.41.55 183150
